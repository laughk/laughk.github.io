<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>続・ラフなラボ</title><link>http://memo.laughk.org/</link><description></description><atom:link href="http://memo.laughk.org/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 03 Feb 2016 00:00:00 +0900</lastBuildDate><item><title>PelicanテーマHSSを公開した</title><link>http://memo.laughk.org/2016/02/03/publish-pelican-hss.html</link><description>&lt;p&gt;&lt;a href="/2016/01/27/blog-renewal.html"&gt;前回&lt;/a&gt;の続き&lt;br /&gt;
公開はしていたのですが、このブログ用に作っていた&lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;のテーマが大体形になったかなーという段階まで来たので改めて。&lt;/p&gt;


&lt;p&gt;リポジトリはこちらです。(前回のエントリから変わってます)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/laughk/pelican-hss"&gt;laughk/pelican-hss: HSS is responsive and single page design theme for Pelican.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もともとは自分のブログ用にハックしてパブリックに置いておけばいいかな程度でやってたのですが、&lt;br /&gt;
「こうしたい、ああしたい」といじりまくり、更には最近参加している社内のHTML5/CSS3モダンコーディング勉強会&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;で得た知識を使いたい！と熱が入りまくり、気がついたら見た目がほとんど別物にまでなっていました。&lt;/p&gt;
&lt;p&gt;そんな経緯で、元の作者に可能な限り経緯を示しつつHSSと名前を変えて公開しています。
見た目はこのブログそのもので大体以下のものが追加できたりします。(READMEにも説明をつけたのでこちらではざっくりと)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者ロゴのURL指定&lt;/li&gt;
&lt;li&gt;Google Analytics の埋め込み&lt;/li&gt;
&lt;li&gt;Google Adsense (レスポンシブのみ) の埋め込み&lt;/li&gt;
&lt;li&gt;Disqus の埋め込み&lt;/li&gt;
&lt;li&gt;ソーシャルボタン (twitter, facebook, pocket, はてぶ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にも自分で足りないと思うものがあったら足すかもしれませんが、大体これくらいで一段落かなーとい感触はあります。&lt;/p&gt;
&lt;p&gt;すでに Pelican を使っている人も、これから静的サイトジェネレーターでブログをやろうと思っている方も、よろしければご活用ください。 &lt;br /&gt;
また、MITライセンスで公開していますので「微妙にここが気に食わない！」などありましたらご自由にフォークしてカスタムもお好きなようにどうぞ！&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="http://www.amazon.co.jp/gp/product/B0176GNY26/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B0176GNY26&amp;amp;linkCode=as2&amp;amp;tag=laughk-22"&gt;HTML5/CSS3モダンコーディング フロントエンドエンジニアが教える3つの本格レイアウト スタンダード・グリッド・シングルページレイアウトの作り方&lt;/a&gt; を進めてます。わかりやすくて良いです。&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Wed, 03 Feb 2016 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2016-02-03:2016/02/03/publish-pelican-hss.html</guid><category>pelican</category></item><item><title>ブログをリニューアルした</title><link>http://memo.laughk.org/2016/01/27/blog-renewal.html</link><description>&lt;p&gt;リニューアルといっても &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; のテーマを変えただけなのだけど。&lt;/p&gt;


&lt;p&gt;今回は今までと違って既存のテーマをforkしてガシガシいじってる。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/laughk/pelican-svbhack"&gt;laughk/pelican-svbhack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このブログは &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; でビルドした静的ファイルを gihubpages にホスティングする形で使っていて、&lt;br /&gt;
Pelican自体は結構豊富な種類のテーマが用意されている&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pelicanthemes.com/"&gt;Pelican themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なのだけど、あまりシングルレイアウトでいい感じのものがなかったのと&lt;br /&gt;
フォントとかデザインがあまり日本人向けじゃないかなーと個人的に感じるところが多くて中途半端なカスタムを加えたりとかしていた。&lt;/p&gt;
&lt;p&gt;ただ自分で非公式にハックしてるのもメンテが大変だし、色々あまりよろしくは無いと思っていて、
比較的シンプルなデザインだった &lt;a href="https://github.com/gfidente/pelican-svbhack"&gt;gfidente/pelican-svbhack - HTML&lt;/a&gt; がMITライセンスだったこともありありがたくフォークさせてもらうことにした次第。&lt;/p&gt;
&lt;p&gt;まだ「これで完成かなー」というところまで全然こぎつけてないけど
大体自分が使いたかったレイアウトで安定はしてきたかなというところでブログに適用してみた。&lt;br /&gt;
デザインの細かな調整や配色、READMEとかも合わせてまだまだ整備していく予定。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Wed, 27 Jan 2016 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2016-01-27:2016/01/27/blog-renewal.html</guid></item><item><title>エンジニアの朝活にスポーツジムはいかがでしょう？</title><link>http://memo.laughk.org/2015/12/15/shall-we-sports-gym.html</link><description>&lt;p&gt;日付が変わってしまいましたが、&lt;br /&gt;
この記事は &lt;a href="http://qiita.com/advent-calendar/2015/pepabo"&gt;Pepabo Advent Calendar 2015 - Qiita&lt;/a&gt; の15日目の記事です。前回は... buty4649さん...!&lt;/p&gt;
&lt;p&gt;今回はちょっと息抜き記事として、&lt;br /&gt;
エンジニアも朝活を利用して適度に体を動かす習慣を作ってみるのはいかがでしょうか？&lt;br /&gt;
ということを私個人がやっていることを紹介ながら書いてみようと思います。&lt;/p&gt;


&lt;h1&gt;やってること&lt;/h1&gt;
&lt;p&gt;ペパボに入ってからずーっと、&lt;br /&gt;
毎朝会社近くのスポーツジムに寄ってから出社しています。なんやかんやで1年3ヶ月ほどでしょうか。&lt;/p&gt;
&lt;h1&gt;なんでそんなことしてるの？&lt;/h1&gt;
&lt;h3&gt;もともとスポーツジムには行ってた&lt;/h3&gt;
&lt;p&gt;私はいわゆるWeb系のインフラエンジニアとして働いていますが&lt;br /&gt;
時間外のエスカレーションは一番受けやすく、オンプレ環境があるとデータセンター作業があったりと実は結構体力勝負なところも多いです。&lt;/p&gt;
&lt;p&gt;基本的にはいつでも対応できるコンディションを整えておきたいと思っていて、&lt;br /&gt;
そのためにはある程度の体力付けておきたいなということから前職にいた時から当時の自宅近くのジムに通っていました。&lt;/p&gt;
&lt;h3&gt;なんで朝？&lt;/h3&gt;
&lt;p&gt;結構Web系の会社は業務開始が遅めのことが多く、ペパボも例外ではなく東京本社はAM10:00が始業時間。
そのため就業後だと20時開始とかになり、定時でもジムが終わるのが22~23時とかなってしまって個人的にはなかなかしんどいです。
特にペパボに入社した段階では住んでいる場所も変わっていて、就業後に自宅近くで... となると更に厳しい感じでした。&lt;/p&gt;
&lt;p&gt;他にも就業後の時間だと勉強会や飲み会などのイベントも入りやすい時間で、リズムが崩れたりすることも多く、&lt;br /&gt;
なんとかうまくやりくりできないかと考えて気がついたのが朝、就業前の時間でした。&lt;/p&gt;
&lt;p&gt;定時が遅いということは逆に言えば朝の時間に余裕があります。
調べてみると朝早い時間帯でもやっているジムは結構あって&lt;br /&gt;
時間を絞ったモーニングコースとかで会員登録するとなかなかお得だったりもします。&lt;/p&gt;
&lt;p&gt;ということで職場に近いところで見つけて通い始めたのでした。&lt;/p&gt;
&lt;h1&gt;やってみてどうなの？&lt;/h1&gt;
&lt;p&gt;マイナス面はなさそうだし、今の自分のライフスタイルにあっていると思っていて、&lt;br /&gt;
今だと朝体動かさないと気持ち悪いくらいにはなってます。
また、仕事前にバテるということも思いの外ほとんどないです。&lt;/p&gt;
&lt;p&gt;もちろんジムでやることはできる範囲にはしていて、&lt;br /&gt;
基本は30分程度のランニングがベースでキツ目の筋トレとかは毎回やっているわけではないです。&lt;/p&gt;
&lt;p&gt;他にも単純に体を動かす以外にのいいこともあります。&lt;/p&gt;
&lt;h3&gt;一日を始める敷居が下がっている&lt;/h3&gt;
&lt;p&gt;朝起きたら「ジム行って体動かす」とだけ思って鞄片手に家を出ればいいので、余計なことを考えずに済んで気が楽です。&lt;br /&gt;
特にスポーツジムの場合はシャワーなど水回りもちゃんとしてるので、「朝の準備もそっちですりゃいいやー」となるのも大きいです。&lt;/p&gt;
&lt;p&gt;また会社のそばのジムにしたので、仕事前にシャワーが浴びれてリフレッシュして仕事に入れます。
特に夏場の通勤時にかいた汗も一緒に流せるのはうれしいですね。&lt;/p&gt;
&lt;h3&gt;朝の時間を有効に使おうと思うようになった&lt;/h3&gt;
&lt;p&gt;前述している様に確かに一日を始める敷居を下げていると感じつつも、&lt;br /&gt;
やっぱりどうしても行けないケース(出張、ジムがお休みなど)があります。&lt;/p&gt;
&lt;p&gt;それでも、いつも朝仕事をする間に時間をとることが習慣になるので&lt;br /&gt;
副作用的にジムに本来行っている時間を別の事にもスッと当てられるようになりました、&lt;/p&gt;
&lt;p&gt;たとえば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;早めに出社して集中して作業する時間を作る&lt;/li&gt;
&lt;li&gt;役所に寄って手続きを済ませてから出社する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;みたいな感じに。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;そんなわけで朝活の活用例として、スポーツジム通いで体力を強化をしてみるもいかがでしょうか。&lt;br /&gt;
朝が苦手でない。が前提条件にはなってしまいますが定期的に体を動かしてリフレッシュもできますし、オススメです。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Tue, 15 Dec 2015 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2015-12-15:2015/12/15/shall-we-sports-gym.html</guid><category>AdventCalendar</category></item><item><title>ペパボっぽい Libreoffice Impress のテーマっぽい何か</title><link>http://memo.laughk.org/2015/10/25/pepabo-libreoffice-impress-theme.html</link><description>&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ペパボっぽい Libreoffice Impress のテーマっぽいものを勢いで作って公開してみた話&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;
&lt;p&gt;最近自分もちょくちょくスライドを書く機会が出てきて、&lt;br /&gt;
社内関連のものとかは &lt;a href="https://twitter.com/kenchan"&gt;@kenchan&lt;/a&gt; くんさんの &lt;a href="https://github.com/kenchan/keynote-theme"&gt;ペパボっぽいkeynoteテーマ&lt;/a&gt; をよく使わせていただいていた。&lt;/p&gt;
&lt;p&gt;ただ自分がプライベートでメインで使ってる環境が ArchLinux で、&lt;br /&gt;
先日の PyConJP 2015 のLTの時なんかのように外部の資料を作るときにわざわざサブのMacの環境使うのもなーと思い始めていたので Libreoffice impress 用にそれっぽいものを勝手に作って公開してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/laughk/libreoffice-impress-theme"&gt;laughk/libreoffice-impress-theme&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォントは英字がArialで、日本語がM+フォントを使うことが前提。&lt;/li&gt;
&lt;li&gt;Linux版 Libreoffice 4.4, 5.0 でのみ表示を確認済。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Libreoffice impress が keynote みたいにスライドを追加するときに複数の候補からスライドのスタイルを追加するみたいなことができなくて、「とりあえずそれっぽい形のスタイルのスライドを実際に追加しといたので適宜コピーするなり消すなりして使ってね」というしょぼい作りにはなってしまったけど、まあ個人的な要件は満たせそうなので良しとする。&lt;/p&gt;
&lt;p&gt;Libreoffice impress、もう少しテンプレート作りやすくなって公開されるテーマ増えないかなー。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 25 Oct 2015 15:40:00 +0900</pubDate><guid>tag:memo.laughk.org,2015-10-25:2015/10/25/pepabo-libreoffice-impress-theme.html</guid><category>slide-theme</category></item><item><title>PyConJP 2015 で 「3分でサーバオペレーションコマンドを作る技術」というタイトルでLTしてきた #pyconjp</title><link>http://memo.laughk.org/2015/10/20/pyconjp2015-lt-report.html</link><description>&lt;p&gt;大分遅れましたが、自分用の記録としてまとめときます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-10-14 09 02 12" src="/images/2015/10/2c67a9e2-75e7-11e5-8cb5-128a3542e9a4.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyConJP 2015 でLTしてきたという話&lt;/li&gt;
&lt;li&gt;大規模なカンファレンスで発表するの、メリットしか無いしみんなまず手を上げてみればいいんじゃないかなと思った話&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;PyConJP 2015 に参加した際の全体的なメモに関してはこちらをご参照ください &lt;a href="/2015/10/18/pyconjp2015-report.html"&gt;PyConJP 2015 に行ってきた #pyconjp&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;


&lt;h2&gt;どんなLTしたの？&lt;/h2&gt;
&lt;p&gt;こんなLTです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyConJP2015 公式の案内 &lt;a href="https://pycon.jp/2015/ja/schedule/presentation/93/"&gt;プレゼンテーション：3分でサーバオペレーションコマンドを作る技術 | PyCon JP 2015 in TOKYO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Togetter &lt;a href="http://togetter.com/li/885072"&gt;「3分でコマンド」「PyCon Canada」「チャット通知ライブラリ」「pandas」「Dask」LT そして初日のクロージング #PyConJP_C #pyconjp - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当日使ったスライドはこちら&lt;/p&gt;
&lt;iframe src="https://www.slideshare.net/slideshow/embed_code/key/CGmYFzkoDWcFHn" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/laughk/3-53764813" title="3分でサーバオペレーションコマンドを作る技術" target="_blank"&gt;3分でサーバオペレーションコマンドを作る技術&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/laughk" target="_blank"&gt;Kei Iwasaki&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;このLTで伝えたかったこと、持って帰っていただけるといいなと思ったのは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fabricっていう、SSH経由のオペレーションをいい感じにしてくれるツールがあるよ&lt;/li&gt;
&lt;li&gt;fabricを知っている人はデプロイツールのイメージが強いかも知れないけど、ライブラリとして使ってもいい感じだよ&lt;/li&gt;
&lt;li&gt;コマンドラインツールを作るときはClick使うと便利だったんでみんな使えばいいよ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;今日紹介した内容なら、そこまでpython詳しくなくても始められるよ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;普段コードを書かないWeb系インフラエンジニアと呼ばれるサーバ管理者/オペレータの人でも手軽に始められるよ。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったものです。  &lt;/p&gt;
&lt;p&gt;実はLT募集の前に &lt;a href="https://pycon.jp/2015/ja/proposals/vote/42/"&gt;10年続くWebサービスでも使えるOpsのためのfabric入門&lt;/a&gt; というタイトルでTalkプロポーザルの応募をしていて、&lt;br /&gt;
実際に業務の隙間時間や&lt;a href="http://pyhack.connpass.com/"&gt;#pyhack&lt;/a&gt;に参加した際にコマンドラインツールを作成して、一部実際に業務で利用する環境に導入し始めている話までできればよかったのですがこちらはリジェクトという結果になりました。
それでも多少なりともWeb系のシステム運用側から何か話ができないかなという思いでLTで出来る限りの内容でお話させていただいた次第です。&lt;S&gt;(結果3分とタイトルに入れておきながら5分で話せる情報量の限界にトライする形になってしまった。)&lt;/S&gt;&lt;/p&gt;
&lt;p&gt;そのため、前提にあったレガシー環境(主にCentOS4以下がまだ結構な数で現役&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;)だらけでansibleが使えなかった話や、脆弱性対応で fabric を使ってみてチーム無いから「便利だけどワンライナーでもっと使いやすければすごく便利そう」といった反応を受けて実際にLTで紹介した内容を元に実際に作成したサービスに特化したWebオペレーションコマンドラインツールのお話なんかは飛んでしまった部分はあります。&lt;/p&gt;
&lt;h2&gt;PyConJPでLTをやってみて思ったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;緊張はかなりするし、資料を用意するのはパワーが必要ではある。&lt;/li&gt;
&lt;li&gt;PyConJPの場合は登壇者は自然に撮影してもらえる &lt;S&gt;&lt;strong&gt;Facebookとかにドヤ顔で挙げれる素晴らしい写真が手にはいる&lt;/strong&gt;&lt;/S&gt;&lt;/li&gt;
&lt;li&gt;会場に居る時に自分は何をやっている人なのか？の説明がぐっとやりやすくなる。&lt;/li&gt;
&lt;li&gt;Partyなどで登壇した時のネタを元に話ができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など、登壇してみて思うのは基本的に &lt;strong&gt;メリットしか無いです&lt;/strong&gt;。&lt;br /&gt;
特に私の場合、今回技術的にそこまでテクニカルな内容でも無ければ、機械学習などのとりわけpython界隈の今アツい分野の話でもありません。&lt;strong&gt;普段Pythonやっててこんなのがよかったんですでど、どうでしょう？&lt;/strong&gt; といった感じでした。  &lt;/p&gt;
&lt;p&gt;それでも大人数の人の前で発表する機会も得られたし、&lt;br /&gt;
なにより各種SNS、Twitter、そしてPartyなど会場で直接様々なフィードバックが得られます。&lt;/p&gt;
&lt;p&gt;「fabric 知らなかった」「Click便利」「もっと詳しく聞きたかった」「便利なコマンド作りたい」
と思ったなどフィードバックいただけて本当にLT応募してみてよかったと思うし、何か些細なネタでもとりあえずみんな手を上げてみればいいよと思いました。&lt;/p&gt;
&lt;p&gt;すでに気が早いですが、来年はTalkプロポーザルでなにかお話ができればいいなと「次に向けてやるぞ！！」と思えました。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;現在絶賛リプレース中です&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Tue, 20 Oct 2015 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2015-10-20:2015/10/20/pyconjp2015-lt-report.html</guid><category>pyconjp</category><category>python</category></item><item><title>PyConJP 2015 に行ってきた #pyconjp</title><link>http://memo.laughk.org/2015/10/18/pyconjp2015-report.html</link><description>&lt;p&gt;少し遅れちゃいましたが、先週末に行われた &lt;a href="https://pycon.jp/2015/ja/"&gt;PyConJP 2015&lt;/a&gt; のカンファレンスに参加したのでその時のメモ書きをまとめます。&lt;br /&gt;
1日目のLTで「&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/93/"&gt;3分でサーバオペレーションコマンドを作る技術&lt;/a&gt;」というタイトルで登壇させていただいたのですが、そちらはまた別途まとめます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2015-10-20 追記&lt;/strong&gt; LTのまとめ書きました&lt;br /&gt;
* &lt;a href="http://memo.laughk.org/2015/10/20/pyconjp2015-lt-report.html"&gt;PyConJP 2015 で 「3分でサーバオペレーションコマンドを作る技術」というタイトルでLTしてきた #pyconjp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/images/2015/10/c4858f3a-75b7-11e5-9638-779c754c2825.jpg" /&gt;&lt;/p&gt;


&lt;h2&gt;すでにあるまとめとか&lt;/h2&gt;
&lt;p&gt;当日の様子は下記のリンク先にまとめられているのでそちらを見るのが良いと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://togetter.com/li/885210"&gt;【スライド・動画・実況全部入り】PyCon JP 2015 まとめまとめ #PyConJP - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techstars.jp/blog/pycon15-1/"&gt;もう確認した？PyCon JP 2015、公開済み全スライドまとめ #pyconjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;カンファレンス 1日目&lt;/h2&gt;
&lt;p&gt;午前中は基調講演(内容は &lt;a href="http://ox.cx/b"&gt;ox.cx/b&lt;/a&gt; )から &lt;a href="https://pycon.jp/2015/ja/schedule/presentation/47/"&gt;強くなるためのプログラミング ープログラミングに関する様々なコンテストとそのはじめ方ー&lt;/a&gt; を聞いてという流れ。&lt;br /&gt;
基調講演はホスティングのインフラに絡む話で個人的に「おお！PyConでインフラ絡みの話も聞けるとは！」という印象。&lt;br /&gt;
その中でもメトリクスを監視について平均値だけ見てると情報が流れてくので微分して瞬間的な傾向も追っかけてるという話が興味深かった。&lt;br /&gt;
あと地味にここで &lt;strong&gt;uWSGIのuってμのことだったのか！&lt;/strong&gt; と地味に初めて知った...&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;メトリクスに数学的なアプローチ確かにできれば便利そうだよね。普段Muninやらmackerelやら見てるが、そう言えばあまり意識してないなー &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/652653625747992577"&gt;2015, 10月 10&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/47/"&gt;強くなるためのプログラミング ープログラミングに関する様々なコンテストとそのはじめ方ー&lt;/a&gt; では分野別のコンテストに関する情報が満載で、 「興味が湧いた分野でとりあえずなんかやってみたい」もそうだし「なんかコード書きたいんだけど何すりゃいいのかよくわからん」という人も&lt;a href="http://www.slideshare.net/cocodrips/pyconjp"&gt;くーむさんの資料&lt;/a&gt;見れば強くなるきっかけが掴めそうだと思ったし自分もなんか新境地広げたい時にもっかい見ておこうと思った。&lt;/p&gt;
&lt;p&gt;そんな感じで午前中は過ごしお昼の時間に、&lt;a href="http://plone.jp/plone-symposium-tokyo-2015"&gt;Ploneシンポジウム&lt;/a&gt;でもランチがかなり美味しくて期待していたけど案の定期待通り、美味しかった。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;ランチ。ガパオご飯とグリーンカレー &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt; &lt;a href="http://t.co/gHGJ521fxx"&gt;pic.twitter.com/gHGJ521fxx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/652683232207499264"&gt;2015, 10月 10&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ただこの時はLTに登壇する際のイメージがまだ掴みきれてなかったりとかして、
サッとランチを食べてイメージ固めてる最中に &lt;a href="https://twitter.com/wolf20xx"&gt;@wolf20xx&lt;/a&gt; さんに声かけて頂いて大分緊張が和らいだ。その節は本当にありがとうございました。  &lt;/p&gt;
&lt;p&gt;またお昼に&lt;a href="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=laughk-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=ss_til&amp;amp;asins=4774177075"&gt;Python ライブラリ厳選レシピ&lt;/a&gt;の先行発売が行われていて、価格も少しお得になっていたのでAmazonで予約していたがその場で購入。著者の皆様からサインも頂いてホクホクだった&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;:memo: amazonで予約してたのキャンセルしておく。(先行発売のものゲット) &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt; &lt;a href="http://t.co/20vbq7o7eo"&gt;pic.twitter.com/20vbq7o7eo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/652734194355859456"&gt;2015, 10月 10&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;午後は&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/53/"&gt;オープンデータプラットフォームを作る話&lt;/a&gt;と&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/51/"&gt;Tornado/ElasticSearchで実現する大量ツイートのリアルタイム関連文書判定&lt;/a&gt;の話を聞いて適当にオープンスペースでだべりつつそのままコーヒーブレイクへ。気がついたら近くに &lt;a href="https://twitter.com/kitak"&gt;@kitak&lt;/a&gt; がいてビビったのを覚えてる。&lt;/p&gt;
&lt;p&gt;その後は&lt;a href="tse - Pythonによるテキスト整形ユーティリティ"&gt;tseというsedやawkのような処理をpythonでできるツールのお話&lt;/a&gt;と&lt;a href="https://twitter.com/aodag"&gt;@aodag&lt;/a&gt;さんの&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/46/"&gt;Packaging最前線&lt;/a&gt;を聞いていた。特にPackaging最前線の話は、最近妙にpipのアップデートが多いなと思っていたのでそのあたりのまとまった話が聞けてよかった。&lt;/p&gt;
&lt;p&gt;そしてその後はカンファレンスホールでLT開始。&lt;br /&gt;
実は前日までどのタイミングで自分がやるかわかっていなかったけど、なんと一番最初でした。&lt;br /&gt;
ただ変に後回しにされるよりも「俺がトップバッターだ！！！」と開き直れたので結果的に良かったです。&lt;br /&gt;
そのへんは冒頭にも書いたようにまた別エントリとして書きます。&lt;/p&gt;
&lt;p&gt;LT後はすっかり腑抜けになってしまってしばらく記憶が曖昧になってしまってましたが、&lt;br /&gt;
一気に安心したことは覚えています。その後のパーティーでは料理、ビールが美味かったりいくつかLTのフィードバックをいただけたりで非常に良かったです。&lt;/p&gt;
&lt;h2&gt;カンファレンス 2日目&lt;/h2&gt;
&lt;p&gt;この日も午前中から参加
基調講演からそのまま同じ場所に残ってJob Fairを聞いていた。&lt;/p&gt;
&lt;p&gt;基調講演はBeProudの佐藤治夫さん。&lt;br /&gt;
BeProudという会社/組織をどうやって作ってきたかという話だった。&lt;br /&gt;
全体通して非常に良い話だったのだけど個人的に「感動すると創造的になれる」という下りのところが一番響いて、python限らず働いているうちは忘れずに大切にしたいなと思った。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;「感動すると創造的になれる」 いい話。感動し続けたい。 &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653021669766774784"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Job Fair に関しても、最初は転職が絡んだ話かな？と思っていたけどパネルディスカッションが聞いていておもしろかった。
特に「入口をもっとつくらないといけない。日本の何処かにいる「アイデアだけ持っている人」が検索した時に出てくるのはだいたい Rails というのが現状。」とう下りからのぐぐったらパイを増やすことの重要さ、志の低い人がいないと志の高い人が出てこないという話はなるほどな。と思ったし、自分が隙なことに関してアウトプットしていく大切さを実感した。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;「志の低い人が居ないと志の高い人が生まれてこない。」 &lt;a href="https://twitter.com/hashtag/PyConJP_C?src=hash"&gt;#PyConJP_C&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653040423221399552"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;ググった時のパイを増やすの確かに大事。アウトプットちゃんと増やさないとな... &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/PyConJP_C?src=hash"&gt;#PyConJP_C&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653042388579909633"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ランチは2日目も基本的に前日同様4種類から選択できてよかったし美味かった。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;今日も旨そう！ &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt; &lt;a href="http://t.co/RmSDMYoWME"&gt;pic.twitter.com/RmSDMYoWME&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653055208893714432"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;p&gt;午後からは &lt;a href="https://pycon.jp/2015/ja/schedule/presentation/70/"&gt;uWSGI/Dockerを利用したWebサービス運用事例&lt;/a&gt;、 &lt;a href="https://pycon.jp/2015/ja/schedule/presentation/67/"&gt;野球Hack!~Pythonを用いたデータ分析と可視化&lt;/a&gt;、
&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/71/"&gt;PyPIデビュー 2015&lt;/a&gt;の話を聞いた。&lt;/p&gt;
&lt;p&gt;uWSGI/Docker の話はなかなかuWSGIで運用しているという話を聞いたことがなかったので新鮮だった。&lt;a href="http://laugh-labo.blogspot.jp/2012/08/pythondjango-nginx-uwsgi-on-ubuntu.html"&gt;昔Tracを動かしたとき&lt;/a&gt;にちょこっと触っただけだったので、今後PythonでWeb絡みの何かやる際は触ってみようかなと思った。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/shinyorke"&gt;@shinyorke&lt;/a&gt;さんの野球Hack!は &lt;a href="http://pyhack.connpass.com/"&gt;#pyhack&lt;/a&gt;で度々見ていた野球Hack!のPyCon版を是非見たくて行ってみたけど、&lt;strong&gt;好きなことを好きな技術でやっているロールモデルとして非常によかった。&lt;/strong&gt;自分は野球がそれほど好きとかではないのだけど非常に楽しめた。  &lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;野球hack、俺は特別野球好きとかではないけど純粋に好きなことを技術で楽しんでる感があってすごく良かったし来年も聞きたい。 &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/PyConJP_1?src=hash"&gt;#PyConJP_1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653105825783746560"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;最後は&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/71/"&gt;PyPIデビュー2015&lt;/a&gt;。前日のPackaging最前線では全体的なトレンドの話だったけど、こちらは今現在の段階で具体的に何を使ってパッケージを作るのが良いか。という視点のお話。&lt;a href="http://memo.laughk.org/2015/06/07/kite-string-release.html"&gt;最近自分がPyPIに初めてパッケージをアップロードした際&lt;/a&gt;は、ググッても出てくる情報の書かれた時期で内容がバラバラで手探りでどうにかするしかなかったのが正直なところだったこともあり、2015年時点での情報はこれだ！というこの話は非常に良かった。 &lt;a href="https://tiwtter.com/tell_k"&gt;@tell_k&lt;/a&gt;さんの当日のスライドは保存版だと思う。 ( スライド -&amp;gt; &lt;a href="http://tell-k.github.io/pyconjp2015/"&gt;PyPIデビュー2015&lt;/a&gt; )&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;PyPIデビュー2015, setup.py の書き方とかその辺、ググると古い情報とごちゃ混ぜな感じだったのでこういうまとまった知見非常にありがたかった。 &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/PyConJP_C?src=hash"&gt;#PyConJP_C&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653115480832524288"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;最後はLTからクロージング
LTは自分の番がすでに終わっていたので大分リラックスして聞けた。特に印象に残ったのが&lt;a href="https://pycon.jp/2015/ja/schedule/presentation/91/"&gt;Diversity in Brazil&lt;/a&gt;で、ブラジルでのPythonコミュニティの話(Ruby+Python = RuPy の話や PyLedies の規模だったり) やウミガメの甲羅を3Dプリンタで作ってった話など、自分の知らない視点からの話で面白かった。英語力がもっとあればな...&lt;/p&gt;
&lt;p&gt;最後のクロージングでは抽選も行われ、すっかりPyConJP 2015のアイドルと化していたモノタロウ侍とのじゃんけん大会。&lt;br /&gt;
なかなか勝てなかったけど、最後の方でなんと &lt;a href="https://www.jetbrains.com/pycharm/whatsnew/"&gt;PyCharm&lt;/a&gt; のProライセンスを頂いた。結構いい値段するものなので、いいものをいただけた。&lt;/p&gt;
&lt;h2&gt;全体を通した感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/monotarosamurai"&gt;モノタロウ侍&lt;/a&gt;かわいい&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;電源確保がなかなか厳しい&lt;/p&gt;
&lt;p&gt;これはPyConJPに限らずだけど、この規模のカンファレンスだと会場の場所も限られるだろうし必ずしも電源が豊富に用意できるわけではないだろうから
Twitter見ながらメモとったりするんだとラップトップよりモバイルバッテリーが使えるスマホ+タブレットをもっと積極的に使ったほうがいいのかも。とは思った&lt;/p&gt;
&lt;p&gt;Android だと検索結果をタブに追加できる&lt;a href="http://beeter.io/"&gt;beeter&lt;/a&gt;が個人的に使いやすかった。モバイルでも同等の機能持ってるTwitterクライアント使うとラップトップなしでも案外大丈夫そうだなという手応えがあった&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一部でWifiが切れるとい情報が流れていけど、個人的にそこまでひどいなーという状況には出くわさなかった&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ElasticSearch の話題が多かったなと感じた。ここ最近のPythonでアツいところの機械学習やデータ解析とも絡んでるんだろうなと思った&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;英語、国際カンファレンス感&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;海外からの方も多数居てものすごく国際カンファレンス感があってよかった&lt;/li&gt;
&lt;li&gt;英語力がホントに足りない。今年、来年くらいにかけて段階的にマジで英語勉強しようと思った。もっともっと楽しめるように&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;食べ物周りが全体的によい&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ランチは人数分あってしかも4種類のなかから選べるのがよかった。近くにスッとご飯食べに行けそうな場所もなさそうでこれ大事&lt;/li&gt;
&lt;li&gt;ランチやパーティーのご飯おいしい、ビールがプレモルなの非常によかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最後のじゃんけんで &lt;a href="https://www.jetbrains.com/pycharm/whatsnew/"&gt;PyCharm&lt;/a&gt; のProライセンスもらったしもっとpython書けというお告げだと思って頑張ろう (&lt;S&gt;内容の通知はまだ、気長にお待ちしてます。&lt;/S&gt;ライセンス情報いただきました！ありがとうございます！)&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;じゃんけんで PyCharmPro ライセンスもらったからもっとpython書かないと &lt;a href="https://twitter.com/hashtag/pyconjp?src=hash"&gt;#pyconjp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/653132298137681921"&gt;2015, 10月 11&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 18 Oct 2015 09:10:00 +0900</pubDate><guid>tag:memo.laughk.org,2015-10-18:2015/10/18/pyconjp2015-report.html</guid><category>python</category><category>pyconjp</category></item><item><title>kite-string(凧糸)というtakosanクライアントを公開してPyPIデビューしていた</title><link>http://memo.laughk.org/2015/06/07/kite-string-release.html</link><description>&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kentaro/takosan"&gt;takosan&lt;/a&gt; 向けの簡単なコマンドラインクライアントをpythonで書いてみた&lt;/li&gt;
&lt;li&gt;ついでに PyPI デビューもできてよかった&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;
&lt;p&gt;会社のチャットツールがSlackになってからは通知面ですっかりお馴染みになったSlack版ikachanの&lt;a href="https://github.com/kentaro/takosan"&gt;takosan&lt;/a&gt;。&lt;br /&gt;
特に最近では &lt;a href="https://github.com/kentaro/takosan/pull/5"&gt;dojinekoさんの素晴らしいPR&lt;/a&gt;が取り込まれてHTTPリクエストだけでかなりいい感じの通知ができるようになりました。&lt;/p&gt;
&lt;p&gt;ただパラメタが増えて今まで通りコマンドラインで &lt;code&gt;curl&lt;/code&gt; で色々やるときに結構面倒になってきたので、同じようなノリで使える雑なCLI wrapperをpythonで作ってみました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/laughk/kite-string"&gt;laughk/kite-string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPI: &lt;a href="https://pypi.python.org/pypi/kite-string"&gt;https://pypi.python.org/pypi/kite-string&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使い方とかInstall方法とか&lt;/h3&gt;
&lt;p&gt;PyPIに公開していますので以下のとおりでインストールできます。&lt;br /&gt;
あまり細かく動作確認はできていませんが、python2.6以降(3系も含む)なら動きます。
(python環境は必要に応じて &lt;code&gt;virtualenv&lt;/code&gt; なりと組み合わせてください)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ pip install kite-string
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;できること&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kentaro/takosan/pull/5"&gt;dojinekoさんのPR&lt;/a&gt;のサンプル内にある key にそのまま対応するオプションを用意してます。( ただし field 周りはまだ実装できてないので未対応です。)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--channel&lt;/code&gt; オプションを複数指定すれば複数チャンネルに同時にポストすることも出来ます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;使用例&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ kite &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --channel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@laughk&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --message&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*Hello* \`shachikun\`&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --icon&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:ocra:&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shachikun&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --color&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#3498db&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --pretext&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tell you about slack :ocean:&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --author-name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Slack&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --author-icon&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://slack.global.ssl.fastly.net/272a/img/icons/favicon-32.png&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --author-link&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://slack.com/&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Slack (software)&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --title-link&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://ja.wikipedia.org/wiki/Slack_(software)&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --text&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Slack is a team communication tool co-founded by Stewart Butterfield, Eric Costello, Cal Henderson, and Serguei Mourachov. Slack began as an internal tool used by their company Tiny Speck in the development of Glitch, the defunct online game. Slack was launched in August, 2013, and signed up 8000 customers within 24 hours of launch.&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; --image-url&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://slack.global.ssl.fastly.net/558b/img/slack_logo.png&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; http://takosan.example.com:4979
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/images/2015/06/70f30678-038d-11e5-829f-05f898c4e4f2.png" /&gt;&lt;/p&gt;
&lt;h4&gt;補完&lt;/h4&gt;
&lt;p&gt;bashは&lt;a href="http://click.pocoo.org/4/bashcomplete/"&gt;clickの補完生成&lt;/a&gt;で、zshは&lt;a href="https://pypi.python.org/pypi/genzshcomp/0.5.2"&gt;genzshcomp&lt;/a&gt;で生成して completion も用意してみました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/laughk/kite-string/tree/master/data"&gt;https://github.com/laughk/kite-string/tree/master/data&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/images/2015/06/5d4522a0-038d-11e5-9ff6-8f7e46e5d63e.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zsh&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/images/2015/06/640292da-038d-11e5-9f5c-ea691de49f89.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;ついでにPyPIデビューもできた&lt;/h3&gt;
&lt;p&gt;この kite-string は元も「オレオレ便利ツールにして社内GH;E環境くらいにとどめとうこうかな」と思ってたのですが
よくよく考えると takosan そのものがオープンなツールなわけで別に公開しない理由もなさそうと思ったので、&lt;code&gt;setup.py&lt;/code&gt; の書き方を調べてPyPIに登録するところまでやってみました。&lt;/p&gt;
&lt;p&gt;そのあたりを調べるときにdistributeなど古い情報が多数引っかかってしまってなかなかほしい情報が出てこなかったのですが、&lt;a href="https://github.com/fabric/fabric"&gt;fabric&lt;/a&gt;など普段お世話になっているモジュールの&lt;code&gt;setup.py&lt;/code&gt;の中身を読んでみたりすると非常に参考になりました。&lt;/p&gt;
&lt;p&gt;またpythonプロフェッショナルプログラミング(第2版)にパッケージ作成の解説があり、そちらも非常に参考になりました。&lt;/p&gt;
&lt;iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=laughk-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00XZTYMG6" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;p&gt;kite-string 本当にシンプルにtakosanのURL向けにリクエストを投げることしかしない雑なツールではあるのだけど、
新卒の頃からずっと「コード書いて自分でツールを作って公開してみたい」と思い続けてきた目標がひょうんなことから達成することができました。&lt;/p&gt;
&lt;p&gt;これまで頑張ってコード書いてみても公開したりするのが億劫でなかなか一歩踏み出せないところもあったけど、&lt;br /&gt;
少なくともPyPIに登録することに対する抵抗は大分なくなったし、精神的にひとつの壁を越えられた感じがあってこれからは隙あらばどんどん自分で作ったコードを出していこうという気持ちになれたので kite-string は公開してみて本当に良かったと思います。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 07 Jun 2015 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2015-06-07:2015/06/07/kite-string-release.html</guid><category>python</category><category>slack</category></item><item><title>ブログのデプロイにWerckerを使って楽に投稿できる環境にした</title><link>http://memo.laughk.org/2015/04/05/blog-build-ci-by-wercker.html</link><description>&lt;p&gt;先週くらいに&lt;a href="http://wercker.com/"&gt;wercker&lt;/a&gt;を導入してこのブログのビルドを全自動にしたのでその時のメモ書き&lt;/p&gt;


&lt;h2&gt;これまで&lt;/h2&gt;
&lt;p&gt;このブログはこれまでは新しくエントリを書くときに以下の様な感じでやってました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bitbucketのプライベートレポジトリでMarkdownかReSTで書かれた元のエントリを管理&lt;/li&gt;
&lt;li&gt;新しくエントリを書いたら &lt;a href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt; でビルド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m http.server&lt;/code&gt; とかでローカルで軽く表示の確認&lt;/li&gt;
&lt;li&gt;githubpages のレポジトリにコミットして push&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;今&lt;/h2&gt;
&lt;p&gt;CIができるサービスだと Travis CI や Circle CI をよく目にしますが&lt;br /&gt;
今回は個人用途ということで、フリーでbitbucketのプライベートレポジトリまで使える wercker を導入しました。&lt;br /&gt;
すると以下のとおり。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ブログエントリとなる Markdown ファイルを bitbucket のレポジトリにコミットする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;後は wercker が自動でビルドしてくれて、&lt;br /&gt;
特に問題なければそのまま githubpages のレポジトリにコミットして push してくれます。&lt;br /&gt;
これまでエントリを書いた後が結構面倒だったのですがめっちゃ楽になりました。&lt;/p&gt;
&lt;p&gt;イメージとしては以下のような感じ。
&lt;code&gt;git push&lt;/code&gt; だけ自分でやれば後は wercker がよしなにやってくれます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;+--------+  git push   +-----------+  webhook   +----------------+  deploy   +-------------+
| laptop | ----------&amp;gt; | bitbucket | ---------&amp;gt; | wercker(build) | --------&amp;gt; | githubpages |
+--------+             +-----------+            +----------------+           +-------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;導入の流れのメモ&lt;/h1&gt;
&lt;h2&gt;wercker の設定&lt;/h2&gt;
&lt;p&gt;アカウントを登録してから &lt;code&gt;ADD APPLICATION&lt;/code&gt; をしていく流れまでは情報が既に多数あるので割愛。&lt;br /&gt;
(最初は wercker.yml ファイルに関して一旦そのままにして進んだほうが楽かも)&lt;/p&gt;
&lt;h3&gt;Applications に登録ができたらデプロイターゲット情報を追加&lt;/h3&gt;
&lt;h4&gt;自動デプロイの設定&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/2015/04/blog-build-ci-by-wercker01.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Deploy target name:&lt;/code&gt; は管理しやすい任意の名前で登録&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auto deploy&lt;/code&gt; にチェックを入れて、bitbacket管理のソースレポジトリでhookしたいブランチ名を指定。シンプルにmasterにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;デプロイ先のgithubpagesレポジトリの情報を追加&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/2015/04/blog-build-ci-by-wercker02.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Deploy pipeline&lt;/code&gt; に githubpages 用のレポジトリ情報を持たせておくと wercker.yml 側でpushに必要なtoken情報を持たせなくて良くなるので便利&lt;/li&gt;
&lt;li&gt;github のレポジトリは &lt;code&gt;https://&amp;lt;API_TOKEN&amp;gt;@github.com/&amp;lt;USER&amp;gt;/&amp;lt;REPOSITORY&amp;gt;.git&lt;/code&gt; と指定すればそのままpushできるので、気をつけながら使えばかなり便利&lt;/li&gt;
&lt;li&gt;ただし、TOKENなどの外部に漏れちゃまずい情報はProtectedにチェックを入れるのを忘れずに&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;wercker.yml ファイルの準備&lt;/h3&gt;
&lt;p&gt;2015-04-05現在は以下の様な感じで落ち着いています。&lt;br /&gt;
&lt;code&gt;pip-install&lt;/code&gt;, &lt;code&gt;virtualenv:&lt;/code&gt; あたりの詳細はこちらを確認するのが確実。 &lt;a href="https://github.com/wercker/step-pip-install"&gt;wercker/step-pip-install&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wercker&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;python_location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/usr/bin/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;informatoin&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
           &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python version $(python -V) running&amp;quot;&lt;/span&gt;
           &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from location $(which python)&amp;quot;&lt;/span&gt;
           &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pip freeze: $(pip freeze)&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|-&lt;/span&gt;
          &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;
          &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;

&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;python_location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/usr/bin/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;requirements_file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;packages_list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ghp-import&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;informatoin&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
           &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python version $(python -V) running&amp;quot;&lt;/span&gt;
           &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from location $(which python)&amp;quot;&lt;/span&gt;
           &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pip freeze: $(pip freeze)&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Configute&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|-&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;**********+wercker@gmail.com&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Wercker&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Setup&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|-&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt; &lt;span class="n"&gt;$GHP_REPOSITORY&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deploy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|-&lt;/span&gt;
          &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Update by wercker&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
          &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下の点を意識した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;標準の box-python にも python3.4 はインストールされているので virtualenv で環境を作って使うように&lt;br /&gt;
    (参考: https://github.com/wercker/box-python )&lt;/li&gt;
&lt;li&gt;pelican-plugins は submodule で管理するのでビルド前に &lt;code&gt;git submodule update --init&lt;/code&gt; するのを忘れずに&lt;/li&gt;
&lt;li&gt;デプロイの際はビルドの際に使うモジュールは破棄されるので &lt;code&gt;ghp-import&lt;/code&gt; の改めてのインストールは忘れずに&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;設定は以上&lt;/h2&gt;
&lt;p&gt;これだけやれば準備は完了。&lt;br /&gt;
wercker.yml を作る際に最初だけは色々試行錯誤しますが、1度出来てしまえば
bitbucket レポジトリに純粋にブログエントリを書いた Markdown をコミットするだけでブログの更新が完了します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;python 環境系の情報があまりな印象でしたがやってみたらそれほど苦労せずに出来ました。  &lt;/p&gt;
&lt;p&gt;ここまで持ってくれれば自分で静的ページを生成してホスティングするやり方のブログでも&lt;br /&gt;
Bitbucket の Web 画面から直接 Markdown ファイルを追加してブログ更新出来たりとかで、書いた後の煩わしさから開放されそうです。&lt;/p&gt;
&lt;p&gt;はてなブログやらTumblrやらQiitaやら使えよって話かもしれませんが、&lt;br /&gt;
やっぱり元のエントリはちゃんと自分でgit管理しておきたいし、CIを実際に触って便利感を実感できたのでよしとします。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 05 Apr 2015 18:47:00 +0900</pubDate><guid>tag:memo.laughk.org,2015-04-05:2015/04/05/blog-build-ci-by-wercker.html</guid><category>pelican</category><category>wercker</category><category>ci</category><category>githubpages</category></item><item><title>tmux 内で SSH した時のロギングを自動でやる</title><link>http://memo.laughk.org/2014/12/09/tmux-ssh-logging.html</link><description>&lt;p&gt;この記事は &lt;a href="http://qiita.com/advent-calendar/2014/pepabo"&gt;Pepabo AdventCalendar 2014&lt;/a&gt; の9日目の記事です。&lt;br /&gt;
前日は&lt;a href="http://blog.inouetakuya.info/entry/2014/12/08/214435"&gt;inouetakuya&lt;/a&gt;さんでした！
明日は&lt;a href="http://qiita.com/tnmt"&gt;tnmt&lt;/a&gt;さんです！&lt;/p&gt;
&lt;p&gt;今年まさかアドベントカレンダーに参加することになるとは思っていませんでしたが、&lt;br /&gt;
今朝社内IRCにてチーム内で反響があった tmux で作業をする際の tip を紹介したいと思います。&lt;/p&gt;


&lt;hr /&gt;
&lt;h2&gt;今朝のチームのIRCの一幕&lt;/h2&gt;
&lt;p&gt;私はいちいち手動で作業ログを取得するのが面倒なので普段から踏み台サーバの tmux で pip-pane を使ってほぼ自動的にやっているのですが、
今朝以下を zipper さんに発見されたのをきっかけにすこし盛り上がりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;laughk 11803 0.1 0.0 74852 1496     ? Ss  10:23 0:00 tmux -2
laughk 11804 0.1 0.0 65764 3200 pts/3 Ss+ 10:23 0:00 \_ -bash
laughk 11861 0.0 0.0 54660 2756 pts/9 Ss+ 10:23 0:00 \_ ssh db002.******************
laughk 11863 0.0 0.0 63824 1124     ? S   10:23 0:00 \_ sh -c cat &amp;gt;&amp;gt; /home/laughk/.tmuxlog/db002.****************/2014-12/09/102348.log
laughk 11864 0.0 0.0 58888  532     ? S   10:23 0:00 \_ cat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;IRCログ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10:26:21    zipper | 全然関係ないけど、いわっちさー作業ログってどうやって取ってるの？
10:26:48   iwasaki | お
10:26:51    zipper | http://ghe.**********/gist/zipper/30d0d4a03553bab1d70e
10:26:54    zipper | これ気になる
10:26:56    zipper | cat &amp;gt;&amp;gt; ?
10:27:09   iwasaki | ああ
10:27:51   iwasaki | tmux pipe-pane って機能使ってやってる感じです。
10:28:07   iwasaki | せっかくなのでgistに書き起こしてみます
10:28:31    zipper | pipe-paneか
10:28:36    zipper | 使ってる使ってる
10:28:51    zipper | pipe-pane使うとフォークするんだなぁってことを知った
10:28:56    zipper | そりゃそうだ感あるけどｗ
10:28:56  Bob_tani | おれも、いわっちの話きいてまねしていれた。
10:30:05   iwasaki | http://ghe.**********/gist/laughk/cd3e1755bffcd899efc9
&lt;span class="cp"&gt;10:30:05        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(zipper): bind-key H command-prompt -p &amp;quot;logname:&amp;quot; &amp;quot;pipe-pane &amp;#39;cat &amp;gt;&amp;gt; $HOME/logs/%%.log&amp;#39; \; display-message&lt;/span&gt;
                   | &amp;#39;Started logging to $HOME/logs/%%.log&amp;#39;&amp;quot;
&lt;span class="cp"&gt;10:30:05        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(zipper): bind-key h pipe-pane \; display-message &amp;#39;Ended logging&amp;#39;&lt;/span&gt;
10:30:11    zipper | ↑こんな感じで入れてた
10:30:17      tora | ほうほう
10:30:19    zipper | っても、glidenoteさんのパクリな気がする
10:30:21      tora | さっそくパクろう
10:30:21   iwasaki | 相当強引ですが、↑ を bashrc に書いてますねー
10:30:26    zipper | なるほど
10:30:37   iwasaki | tmux 内で ssh すれば自動的にロギング開始です
10:30:40    zipper | tmuxならdefault-commandあたりでできそうな気がする
10:30:43    zipper | おお
10:30:46    zipper | かっこいい
10:31:03      tora | 自動！
10:31:14      tora | ログイン先にログがでるのはいいすね
10:31:41   iwasaki | いちいちロギング有効にしたりするのがダルかった+忘れることが多かったので頑張って見た感じです
&lt;span class="cp"&gt;10:31:43        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(tora): やっぱりそうなるよねぇ &amp;gt; /home/laughk/bin/tmux&lt;/span&gt;
10:31:57    zipper | tmuxバージョンあげよう計画
10:32:01    zipper | ってか、rpm作ろうｗ
10:32:11    zipper | *****-repoにうｐればよい
10:32:42    zipper | みんな俺俺tmux入れるのはツライ
10:34:11    zipper | RHEL Client relase …？
10:34:21    zipper | Tikango
10:34:26    zipper | Tikanga
&lt;span class="cp"&gt;10:36:42        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice -&amp;gt; #**********: なんかアドベントカレンダーのネタこっちのほうが良さげ (tmux 自動ロギング)&lt;/span&gt;
10:37:04    zipper | 両方書けばいいんだよ！！！
&lt;span class="cp"&gt;10:37:11        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice -&amp;gt; #**********: weechat ネタ8割がたすでに書いてる...&lt;/span&gt;
&lt;span class="cp"&gt;10:37:17        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice -&amp;gt; #**********: はっ&lt;/span&gt;
10:37:28    zipper | 別に1つである必要はないのだよ！
&lt;span class="cp"&gt;10:37:35        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(tora): じゃあ僕の回で代わりに書いて下さい。&lt;/span&gt;
&lt;span class="cp"&gt;10:37:39        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(zipper): それはダメｗ&lt;/span&gt;
&lt;span class="cp"&gt;10:37:44        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice -&amp;gt; #**********: ちょｗ&lt;/span&gt;
&lt;span class="cp"&gt;10:37:46        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(tora): えっ&lt;/span&gt;
10:38:23    zipper | 12/25空いてるよｗ
10:38:27   iwasaki | wwww
10:38:35    zipper | http://qiita.com/advent-calendar/2014/pepabo
10:38:55   iwasaki | ちなみにアドベントカレンダーでtmuxのロギングネタ書くとしたら、今のIRCのやりとり引用してもよいです？
10:39:37    zipper | 私はいいよ
10:39:38      tora | 開かれたチャンネルなので引用に断りはいらないとおもわれ
10:39:48    zipper | そうね
10:39:48   iwasaki | 了解っす！
10:40:33    zipper | 既知かもしれないけど、私の設定の元ネタこれね https://github.com/glidenote/dotfiles/blob/master/.tmux.conf#L53
10:40:38    zipper | パクったった
&lt;span class="cp"&gt;10:40:47        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(zipper): けど、bind Hはめんどい&lt;/span&gt;
&lt;span class="cp"&gt;10:40:52        &lt;/span&gt;&lt;span class="k"&gt;-- &lt;/span&gt;&lt;span class="s"&gt;| &lt;/span&gt;&lt;span class="c"&gt;Notice(zipper): 変えたいと思っている&lt;/span&gt;
10:41:08   iwasaki | 実は自分もこれをパクった後頑張って自動で走らせるようにしました！ｗ
10:41:13    zipper | だよねーｗ
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;やっていること&lt;/h2&gt;
&lt;p&gt;やりかたは様々ありそうですが、私の場合は &lt;code&gt;~/.tmux.conf&lt;/code&gt; をいじるのではなく、&lt;br /&gt;
&lt;code&gt;~/.bashrc&lt;/code&gt; または &lt;code&gt;~/.zshrc&lt;/code&gt; に以下の関数を定義してssh コマンドに細工をしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;## Tmux + SSH --------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; ssh_tmux&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  tmux  set-option default-terminal &lt;span class="s2"&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        new-window -n &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -ple &lt;span class="s1"&gt;&amp;#39;s/(^|\s)-[^\s] *[^\s]+//g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2 &lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exec ssh &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        run-shell        &lt;span class="s2"&gt;&amp;quot;[ ! -d &lt;/span&gt;$&lt;span class="s2"&gt;HOME/.tmuxlog/#W/&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y-%m/%d&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; ] &amp;amp;&amp;amp; mkdir -p &lt;/span&gt;$&lt;span class="s2"&gt;HOME/.tmuxlog/#W/&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y-%m/%d&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        pipe-pane        &lt;span class="s2"&gt;&amp;quot;cat &amp;gt;&amp;gt; &lt;/span&gt;$&lt;span class="s2"&gt;HOME/.tmuxlog/#W/&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y-%m/%d/%H%M%S.log&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        display-message  &lt;span class="s2"&gt;&amp;quot;Started logging to &lt;/span&gt;$&lt;span class="s2"&gt;HOME/.tmuxlog/#W/&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%Y-%m/%d/%H%M%S.log&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; $&lt;span class="nv"&gt;TERM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; screen &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; $&lt;span class="nv"&gt;TERM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; screen-256color &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ssh_tmux
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを仕込むことでtmux上でのsshコマンドが以下のようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新しい window で &lt;code&gt;TERM=screen&lt;/code&gt; でリモートセッションが始まる。&lt;/li&gt;
&lt;li&gt;作成された window 名が接続先のホスト名またはIPアドレスになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.tmuxlog/(接続先ホスト名またはIPアドレス)/YYYY-MM/DD/HHMMSS.log&lt;/code&gt; というファイルに接続先での作業のロギングをする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的にはログを保存するディレクトリはホストごとに分けたいし、&lt;br /&gt;
window名はホストと同じにしてどこにログイン中なのかわかるようにしておきたい。&lt;br /&gt;
あとは&lt;code&gt;screen-256color&lt;/code&gt;が有効なまんまだとリモート先で悪さされることが結構あるのでよしなにしたい&lt;br /&gt;
といった思いからこんな感じになっております。 (強引だとは思うのでもっといい方法あったら知りたい...)&lt;/p&gt;
&lt;p&gt;これを普段踏み台で使っているサーバに仕込んでおけば、tmuxを起動するだけでロギングするのを忘れずにすみます。
上記IRCログにあるようにtmuxが古いと使えなかったり、地味にtopをやりっぱなしにしておくとログがとんでもなく肥大したりしますが概ね快適に使えています。  &lt;/p&gt;
&lt;p&gt;取得したログを確認したい場合は&lt;code&gt;script&lt;/code&gt;コマンドで取得したもの同様にエスケープシーケンスも入っているので &lt;code&gt;less -r&lt;/code&gt; や &lt;code&gt;less -R&lt;/code&gt; で確認するといい感じです。&lt;/p&gt;
&lt;h2&gt;参考という名の偉大なる元ネタ様&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.glidenote.com/blog/2013/02/04/tmux-pipe-pane-logging/"&gt;tmuxのpipe-paneを利用してリモートサーバでの作業ログをローカルに記録する - Glide Note - グライドノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.repl.info/2011/12/03/ssh-with-tmux-and-zsh/"&gt;tmux内でコマンドを実行する際に新しいウィンドウやウィンドウを分割して実行する | うどん駆動開発&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;man tmux&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Tue, 09 Dec 2014 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-12-09:2014/12/09/tmux-ssh-logging.html</guid><category>AdventCalendar</category><category>tmux</category></item><item><title>TwitPicに上げてる画像をシェル芸で救出してみた</title><link>http://memo.laughk.org/2014/10/26/get-twitpic-img-by-shellart.html</link><description>&lt;!-- 冒頭 --&gt;

&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最近になって twitpic が終わったり終わらなかったりな状況で&lt;br /&gt;
今後どうなるかもわからないし、昔あげていた画像を救出するのにシェル芸でやってみた話。&lt;/p&gt;


&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;とりあえず、結果からのせると以下のような感じ。&lt;br /&gt;
(追記) &lt;code&gt;png&lt;/code&gt; を考慮するの漏れてたので修正しました。(追記おわり)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/put_dir
% &lt;span class="nv"&gt;TWITPIC_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://twitpic.com/photos/laugh_k&amp;quot;&lt;/span&gt;
% seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt; curl -s &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TWITPIC_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -nle &lt;span class="s1"&gt;&amp;#39;if(/&amp;lt;a href=&amp;quot;\?page=([0-9]+)&amp;quot;&amp;gt;Last&amp;lt;\/a&amp;gt;/){ print $1, &amp;quot;\n&amp;quot; }&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; page &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; curl -s &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TWITPIC_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?page=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;&amp;lt;a href=&amp;quot;/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail -n +8 &lt;span class="p"&gt;|&lt;/span&gt; head -20 &lt;span class="p"&gt;|&lt;/span&gt; perl -nle &lt;span class="s1"&gt;&amp;#39;if(/\/[^&amp;quot;]+/){ print &amp;quot;http://twitpic.com/$&amp;amp;&amp;quot; }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; img_page &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; curl -sL &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -nle &lt;span class="s1"&gt;&amp;#39;if(/&amp;lt;img src=&amp;quot;(https:\/\/[^.^&amp;quot;]+\.cloudfront.net\/photos\/large\/[^&amp;quot;]+)&amp;quot;/){ print $1 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; img_url &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;img_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -o -E &lt;span class="s1"&gt;&amp;#39;[^/]+\.(jpe?g|png|gif)&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; wget -O &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;流石にこれだとわかりづらいんでちょっと形成すると以下のような感じ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nv"&gt;TWITPIC_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://twitpic.com/photos/laugh_k&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;### さすがに長ったらしいので、最後のページ情報取得は一旦分ける&lt;/span&gt;
% &lt;span class="nv"&gt;LAST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; curl -s &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TWITPIC_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; perl -nle &lt;span class="s1"&gt;&amp;#39;if( /&amp;lt;a href=&amp;quot;\?page=([0-9]+)&amp;quot;&amp;gt;Last&amp;lt;\/a&amp;gt;/ ){ print $1, &amp;quot;\n&amp;quot; }&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;

% seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LAST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; page
&amp;gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;   curl -sL &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TWITPIC_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?page=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; 
&amp;gt;     grep &lt;span class="s1"&gt;&amp;#39;&amp;lt;a href=&amp;quot;/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&amp;gt;     tail -n +8        &lt;span class="p"&gt;|&lt;/span&gt;
&amp;gt;     head -n &lt;span class="m"&gt;20&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;
&amp;gt;     perl -nle &lt;span class="s1"&gt;&amp;#39;if(/\/[^&amp;quot;]+/){ print &amp;quot;http://twitpic.com/$&amp;amp;&amp;quot; }&amp;#39;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; img_page
&amp;gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;   curl -sL &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_page&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&amp;gt;     perl -nle &lt;span class="s1"&gt;&amp;#39;if(/&amp;lt;img src=&amp;quot;(https:\/\/[^.^&amp;quot;]+\.cloudfront.net\/photos\/large\/[^&amp;quot;]+)&amp;quot;/){ print $1 }&amp;#39;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; img_url
&amp;gt; &lt;span class="k"&gt;do&lt;/span&gt;
&amp;gt;   &lt;span class="nv"&gt;img_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -o -E &lt;span class="s1"&gt;&amp;#39;[^/]+\.(jpe?g|png)&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;
&amp;gt;   wget -O &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;img_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&amp;gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;気にした点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ページャーになってるんで最後のページ情報どうするか&lt;/p&gt;
&lt;p&gt;=&amp;gt; ユーザーページトップにLASTのリンクがあったのでそこからひっぱった&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各画像のページのURLをどうやってピンポイントで出すか  &lt;/p&gt;
&lt;p&gt;=&amp;gt; レイアウト的にどのリンクが引っかかるかわかったんで、&lt;code&gt;head&lt;/code&gt;,&lt;code&gt;tail&lt;/code&gt;でゴリ押し&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最終的にCloudfrontのリンクが取れるが、まんまwgetするとファイル名が大変なことになるので、その辺よしなに保存したい  &lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;code&gt;sed&lt;/code&gt; 使っても良かったけどパターン的に抽出のほうが楽そうだったので &lt;code&gt;grep -o -E&lt;/code&gt; でファイル名を直接引っこ抜き&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;わざわざ画像取得するのにWindows起動するのも面倒だなとなって「よろしいならばシェル芸だ」とやってみたら意外にすんなり行けた。&lt;br /&gt;
糞長いし、ゴリ押し感半端無いし、もっとよさ気な方法あるかもだけど問題が解決できたのでよしとする。&lt;br /&gt;
Twitpicからの画像データ救出、他の言語の練習題材としてもよさ気な感じですね。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 26 Oct 2014 19:20:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-10-26:2014/10/26/get-twitpic-img-by-shellart.html</guid><category>シェル芸</category><category>ネタ</category></item><item><title>GitLab でマージリクエストのマージができなくなってハマった話</title><link>http://memo.laughk.org/2014/10/13/gitlab-cannot-merge-mergerequest.html</link><description>&lt;hr /&gt;
&lt;p&gt;紛らわしい箇所を修正しました(タイトル修正, 利用中GitLabのバージョン明記)&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;所用で最近個人的に&lt;a href="https://about.gitlab.com/"&gt;GitLab&lt;/a&gt;を使い始めたが、
マージリクエストをブラウザ越しにマージする際に、ボタンをクリックしても何故か画面が先に進まず、
延々とマージされない状況が続くという事態に陥ってしまった。&lt;/p&gt;
&lt;p&gt;※ GitLab 7.3.2 での話です&lt;/p&gt;


&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;ひとまずログを調査したところ、&lt;code&gt;githost.log&lt;/code&gt; に以下の文言を発見。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;October&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ERROR&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;satellites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;huga&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;satellites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;huga&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;

&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;rake&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.3.2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundler&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GemNotFound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spec_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;materialize&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;132&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;specs&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;specs_for&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;166&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;requested_specs&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;requested_specs&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.9.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rubygems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;custom_require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.9.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rubygems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;custom_require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;        
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;strage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;setagaya&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
 &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;receive&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="n"&gt;declined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;refs&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;huga&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;私は Ubuntu14.04サーバ上の &lt;code&gt;/usr/local/apps/ruby&lt;/code&gt; 配下にコンパイルしたrubyを使っていたはずなのだが、
&lt;code&gt;apt&lt;/code&gt;経由で入ってしまっていた&lt;code&gt;ruby1.9.1&lt;/code&gt;も参照していた模様。&lt;br /&gt;
(どうやら &lt;code&gt;vim-nox&lt;/code&gt; を入れた際に一緒に入ってしまっていた。。)&lt;/p&gt;
&lt;p&gt;また、このエラーに関して調べてみたら以下のIssueも上がっていた模様&lt;br /&gt;
&lt;a href="https://github.com/gitlabhq/gitlabhq/issues/7230"&gt;Could not find rake-10.3.2 in any of the sources #7230 &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;解決策&lt;/h2&gt;
&lt;p&gt;解決方法はシンプルで、&lt;code&gt;apt&lt;/code&gt;経由での&lt;code&gt;ruby1.9.1&lt;/code&gt;を削除したらブラウザからもマージできるようになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% sudo aptitude purge ruby1.9.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;依存関係で&lt;code&gt;vim-nox&lt;/code&gt;は消えるが、最近のUbuntuサーバは &lt;code&gt;vim.basic&lt;/code&gt; を入れれば最低限 &lt;code&gt;vim&lt;/code&gt; は使えるし、
&lt;code&gt;lua&lt;/code&gt;とか使いたいならコンパイルすればいいのでそれほど問題ではない。&lt;br /&gt;
(そもそもGitLabサーバなんだからバリバリ作業したりもないだろうからそこまでしなくてもいい気がする。)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Mon, 13 Oct 2014 15:53:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-10-13:2014/10/13/gitlab-cannot-merge-mergerequest.html</guid><category>gitlab</category><category>git</category><category>ubuntu</category><category>ruby</category></item><item><title>GMOペパボに入社した</title><link>http://memo.laughk.org/2014/09/07/join-pepabo.html</link><description>&lt;p&gt;先月8月末で主に監視障害対応を請け負うインフラエンジニアとして勤務していた都内の某MSP業社を退職し&lt;br /&gt;
9月1日から&lt;a href="http://pepabo.com/"&gt;GMOペパボ株式会社&lt;/a&gt;にインフラエンジニアとして入社しました。&lt;/p&gt;
&lt;p&gt;[注意]&lt;br /&gt;
いわゆる転職エントリーというもので、個人的な日記です。&lt;br /&gt;
苦手な方はそっとブラウザバックを押していただくこと推奨です。&lt;/p&gt;


&lt;h2&gt;転職の経緯とか&lt;/h2&gt;
&lt;p&gt;これまでのMSPとしての監視運用を中心とする業務を通じて、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;より運用改善をガッツリやってみたい&lt;/li&gt;
&lt;li&gt;ひとつのサービスに特化した運用を経験してみたい&lt;/li&gt;
&lt;li&gt;バリバリコーディングをしてレイヤを問わずに問題を解決できるようになりたい&lt;/li&gt;
&lt;li&gt;運用の際に発生する痛みを解消出来るだけの知見を身につけたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という思いが日に日に強くなっていたこと&lt;/p&gt;
&lt;p&gt;加えて、割と最近までは個人で色々勉強会に行ってみたりで少しずつは回収できていたのですが&lt;br /&gt;
今年に入って結婚して生活環境が大幅に変わり、
これまでの「個人で勉強会に行ってネタを仕入れて職場にちょっとずつ導入」のペースだと
モチベーション的にも体力的にも持たなくなると感じたことが大きいです。&lt;/p&gt;
&lt;h2&gt;GMOペパボ&lt;/h2&gt;
&lt;p&gt;そんな中でGMOペパボを選んだ理由としては、だいたい以下のものが該当します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勉強会で中の人と話をしたり、中の人の発表内容やブログをみていてまさに自分がやりたいと思っていた運用改善を積極的に行っていた&lt;/li&gt;
&lt;li&gt;エンジニアの制度に関するブログを見ていても、インフラ側も含めて考えていて、自分のポジションからでも会社を盛り上げるチャンスがあると思ったから&lt;/li&gt;
&lt;li&gt;転職を本格的に考える段階になった時に出ていた募集要項内容を見て、今この機会を逃したら確実に後悔すると思ったから&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;入社してまだ1周間程度しか経っていませんが
社内のアウトプット内容を見ているだけでもエンジニアとして尊敬できる方が多く、当初の考えは間違っていなかったと感じています。&lt;/p&gt;
&lt;h2&gt;これから&lt;/h2&gt;
&lt;p&gt;正直なところまわりの方々と今の自分の技術力のギャップはかなり感じていて、
「ちゃんとついていけるかな...」と不安に思うところもあります。&lt;/p&gt;
&lt;p&gt;ただ逆に言えば、自分のエンジニアとして今までこれまで伸ばせていなかった部分を存分に成長させるチャンスでもあります。
まわりにいらっしゃる方々から色んな物を吸収しながら、前向きに、転職時に抱いた思いを実現させるべく頑張っていこうと思います。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 07 Sep 2014 13:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-09-07:2014/09/07/join-pepabo.html</guid><category>日記</category></item><item><title>YAPC::Asiaに初参加してきた #yapcasia</title><link>http://memo.laughk.org/2014/09/07/yapcasia2014-repo.html</link><description>&lt;p&gt;先週末、初めて&lt;a href="http://yapcasia.org"&gt;YAPC::Asia&lt;/a&gt;に参加してきたので簡単にレポート。&lt;br /&gt;
0日目は一人で、1日目以降は &lt;a href="https://twitter.com/tkr0429"&gt;@tkr0429&lt;/a&gt; さんと二人で参加した。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;yapcasia前夜祭来てみたら予想以上にいろいろもらえたw すげーw &lt;a href="http://t.co/gygtkJ7d4h"&gt;pic.twitter.com/gygtkJ7d4h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/504923405821296640"&gt;2014, 8月 28&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;



&lt;h2&gt;0日目&lt;/h2&gt;
&lt;p&gt;前夜祭ということでLT祭り。
初めてでビールとかもらえるのを知らずに普通にコンビニで飲み物を買ってから会場に行ってしまったのはやや失敗だった。&lt;/p&gt;
&lt;p&gt;LTからすでにPerl関係なくフリーダムな感じで、非常に面白かった。&lt;br /&gt;
特に wri.pe なんて普通に自分が使いたいサービスとしていいなって思ったし、「プライベートで3年間チーム開発した話」は本当に好きでやっている感があってすごく良かった。
ただ最後のクイズを支える技術に全部持って行かれた感は否めない。デモが面白すぎた。&lt;/p&gt;
&lt;h2&gt;1日目&lt;/h2&gt;
&lt;p&gt;セッションをまわりつつ、無限コーヒーをいただいたり。&lt;br /&gt;
YAPC::Asia ってこんな感じなんだなーということを感じながらすごしていた。&lt;/p&gt;
&lt;p&gt;セッションは私も@tkr0429さんもインフラエンジニアなのでそれに関するものを選んだ傾向が強い。&lt;br /&gt;
特に&lt;a href="https://twitter.com/studio3104"&gt;@studio3104&lt;/a&gt;さん の「インフラエンジニア(狭義)は死んだ」はちょうど自分自身がほぼ同様ののことを色々と考えていたこともあり、非常に響いた内容だった。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;コードかけない/読めないと運用屋は死ぬってのはひしひしと感じていた... &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505166130357338112"&gt;2014, 8月 29&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;その時のTLの反応とか見ていると、「コードかけない奴が死んでいくのは何もインフラエンジニアに限ったことじゃなくインターネットで仕事しているエンジニア全般に言えることでは？」みたいなものが流れていた気がするし、実際そうだと思う。
ただ、自分がいた環境からは少なくとも「いやいや、仕事インフラの方だからコードとか関係ないし」みたいな
どこか他人事のような意識を持ってしまっている人は結構多いんじゃないかなと感じていて、
そういった人たちにはぜひ聞いてほしいなと思えるような内容で、個人的にすごくよかった。
また「カンファレンスとか来ても自分が何をやっているのかということを話せないとなかなか仲良くなりづらい。ブログ書きましょう。アウトプットしよう」というのはホントだなと感じた。アウトプットがんばろう。&lt;/p&gt;
&lt;p&gt;お昼のセッションでもらえたお弁当は美味しかったり、
イベントホールで休んでいるとライブコーディングが始まってワイワイしたりと本当にお祭りという感じだった。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;開封 &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt; &lt;a href="http://t.co/FBBGype6sk"&gt;pic.twitter.com/FBBGype6sk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505190141661429761"&gt;2014, 8月 29&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;残念ながら懇親会から溢れてしまっていたことと、
次の日は朝からセッションに行きたいと思っていたのでこの日は早めに退散。(この時はHubが開放されてるの知らなかったのが最大の失敗)&lt;/p&gt;
&lt;h2&gt;2日目&lt;/h2&gt;
&lt;p&gt;2日目も基本的には1日目と同様の流れですごしてみて、
キーノートからHubに流れた感じ。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;旨そうである &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt; &lt;a href="http://t.co/MEKG7UL0ST"&gt;pic.twitter.com/MEKG7UL0ST&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505552486778683392"&gt;2014, 8月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;2日目もお弁当ゲット。実際うまかったけど、思った以上に卵たっぷりボリュームたっぷりで若干胃がやられた感はある。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;この日聞いたセッションでは&lt;a href="https://twitter.com/koemu"&gt;@koemu&lt;/a&gt;さんの「&lt;a href="http://www.koemu.com/etc/yapcasia2014/#/"&gt;突然ITインフラを任された人のための…監視設計入門&lt;/a&gt;」
がMSPでインフラをやっていた人間としては非常に共感もでき、まだまだ意識が足りないところもあったなという気付きもあった(監視サーバの場所、処理フローからの逆算など)。これはインフラをやっている人はもちろん、Web系の技術者の方なら一度は絶対に聞いてほしいなと感じた。あと、デモで利用していたshioriは個人的にちょっと使ってみたいなと思った。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;誤報なれは確かに怖い。通知受けてもまたアレかって感覚になっちゃうし &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505535267826978816"&gt;2014, 8月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;障害時の意思決定ホント大事だわ. 事前に決めとかないといざという時ホントに泣きを見る... &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505536101864312832"&gt;2014, 8月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;IaaSの障害の時は確かに登録IDとか本人確認とか色々聞かれるからどこに情報あるか認識合わせておくのすごく大事 &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505536763733884928"&gt;2014, 8月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;また、&lt;a href="https://twitter.com/mackee_w"&gt;@mackee_w&lt;/a&gt;さんの「趣味開発のためのVPS/クラウド活用術」は20分の時間で全体の話までは聞けなかったけど&lt;a href="https://vultr.com"&gt;VULTR&lt;/a&gt;というサービスは知らなかったのでちょっと試してみようと思った。&lt;/p&gt;
&lt;p&gt;あとこの日は特に事前受付などはしていなかったけど、Bot作ってみるとか面白そうだなと思ってPerl入学式に飛び入りで参加させてもらえた。最近あまりPerlは触れていなかったけど、&lt;a href="https://twitter.com/__papix__"&gt;@__papix__&lt;/a&gt;さん中心とした講師陣の説明がとにかく丁寧でお題にもいい感じで取り組むことができた。雰囲気も非常によくてPerlというか、とりあえずプログラミング始めたい！って人はPerl入学式行ってみればいいと思った。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;とりあえず「ぬるぽ」って入れたら「ガッ」してもらうようにした &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Perl%E5%85%A5%E5%AD%A6%E5%BC%8F?src=hash"&gt;#Perl入学式&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505590125808459776"&gt;2014, 8月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;クライマックスのLT祭りも面白く、特に&lt;a href="https://speakerdeck.com/onigra/twitterqu-dong-tuo-chu-xin-zhe-number-yapcasia"&gt;TDD(Twitter Driven Datsu-Syoshinsya) / Twitter駆動脱初心者 #yapcasia&lt;/a&gt;がよかった。&lt;/p&gt;
&lt;p&gt;最後の&lt;a href="https://twitter.com/typester"&gt;@typestar&lt;/a&gt;さんのキーノートに関しては、
エンジニアとしての生き方みたいな話でいろんな人との関わりだったり、技術者としての強みをもつことだったり。
本当に今後の生き方を考えさせられた。
特に、「受託を行うことで自分が知らない技術に出会える」ということに関しては、
確実に技術者としての強み、仕事で関わる人通しのつながり・信頼がないと到達できないだろうなと思った。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;20代残り少ないけどまだまだがんばらにゃって思った。いい話だった。 &lt;a href="https://twitter.com/hashtag/yapcasia?src=hash"&gt;#yapcasia&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kei Iwasaki (@laugh_k) &lt;a href="https://twitter.com/laugh_k/status/505647071173431297"&gt;2014, 8月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;最後は「これで2日間終わりかー」という感じでお祭りの終わりみたいな雰囲気があった。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;メインのセッションが終了したところで会場の下の階にあったHubが開放されているので立ち寄ったが、
こちらはまだまだお祭りのまっただ中という感じ。&lt;/p&gt;
&lt;p&gt;たまたまテーブルで一緒に座った&lt;a href="https://twitter.com/do_aki"&gt;@do_aki&lt;/a&gt;さんとYAPCに関して色々お話できたり、
「インフラエンジニア(狭義)は死んだ」の&lt;a href="https://twitter.com/studio3104"&gt;@studio3104&lt;/a&gt;さんと直接お話しできたり
会場のネットワークのCONBUの方のYAPC会場のネットワーク品質に対する情熱トークが聞けたり...&lt;/p&gt;
&lt;p&gt;本当に濃い3日間だった。&lt;/p&gt;
&lt;h2&gt;全体的な感想&lt;/h2&gt;
&lt;p&gt;YAPC::Asiaは去年あたりからすでにPerlメインで使ってない人でも楽しめる！みたいな感じな話は目にしていて、
今年は事前に募集されていたトークの内容からして「IT技術者なら誰でも楽しめそうなものがゴロゴロしてそう」という感じで初参加してみた。&lt;/p&gt;
&lt;p&gt;実際参加してみると、ホントにガチガチなカンファレンスという感じではなく、
会場の至るところに参加者の方がフラフラしていていい意味でゆるい感じでいいな思った。&lt;/p&gt;
&lt;p&gt;ただ、参加人数が人数なだけに
基本的にセッション聞くのは床に座るのがほぼ当たり前になって、そうなってしまうとなかなかスライドが見えなかったりで
会場のキャパとしては結構キツイものがあるのかなという感じはした。(とはいえ、これだけの人数のカンファレンスなので、仕方ない部分もあるとは思う)&lt;/p&gt;
&lt;p&gt;なので、YAPC::Asiaの醍醐味としてはセッショントークやイベントスペースで発生する催しもあるけどやっぱり、
セッションやっている人だったりHUBなりに居る人と直接いろんな話ができることなのかなと勝手に思った。&lt;/p&gt;
&lt;p&gt;1つだけ間違いないと思うのは、YAPC::Asia はITに関するエンジニアの方なら誰でも楽しめる
「エンジニアのお祭り」なんだなということ。来年もまた参加したい！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 07 Sep 2014 02:10:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-09-07:2014/09/07/yapcasia2014-repo.html</guid></item><item><title>ブログジェネレータをTinkererからPelicanに移行した</title><link>http://memo.laughk.org/2014/08/10/tinker2pelican-repo.html</link><description>&lt;p&gt;&lt;strong&gt;2014/09/06&lt;/strong&gt;
一部タイポと文言を修正しました&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;これまでしばらくSphinxベースの&lt;a href="http://tinkerer.me/"&gt;Tinkerer&lt;/a&gt;を使って&lt;code&gt;ReST&lt;/code&gt; -&amp;gt; &lt;code&gt;HTML&lt;/code&gt; 変換を行いGithubpageにホスティングする形でやっておりましたが、Tinkererの部分を&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;に移行しました。&lt;/p&gt;
&lt;p&gt;移行の際にやったことをメモしておきます。&lt;/p&gt;
&lt;p&gt;ちなみに、以下のものはすでに使えることを前提にします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pyenv, pyenv-virtualenv&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;githubpage&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Pelicanのインストール&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;python2.7系最新をインストール(3系の対応が完璧でないっぽいため)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 最新版を確認&lt;/span&gt;
% pyenv install -l &lt;span class="p"&gt;|&lt;/span&gt; grep 2.7

% pyenv install 2.7.8
% pyenv virtualenv 2.7.8 pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作業ディレクトリを適当に作成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% mkdir -p ~/work/blog
% &lt;span class="nb"&gt;cd&lt;/span&gt; ~/work/blog
% pyenv &lt;span class="nb"&gt;local&lt;/span&gt; pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pelicanをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;## Pelican 本体をインストール&lt;/span&gt;
% pip install pelican

&lt;span class="c1"&gt;## Markdown も使いたいのでインストール&lt;/span&gt;
% pip install markdown

&lt;span class="c1"&gt;## plugin, themeもクローン&lt;/span&gt;
% git clone https://github.com/getpelican/pelican-plugins.git
% git clone https://github.com/getpelican/pelican-themes.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで &lt;code&gt;~/work/blog&lt;/code&gt; 配下で pelican コマンドが使えるようになります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pelican&lt;/code&gt;コマンドが使えるようになったら &lt;code&gt;QuickStart&lt;/code&gt; しておきましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;% pelican-quickstart &lt;/span&gt;
&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;span class="n"&gt;needed&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Where&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;? &lt;span class="p"&gt;[.]&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;? 続・ラフなラボ
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Who&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;? &lt;span class="n"&gt;Kei&lt;/span&gt; &lt;span class="n"&gt;Iwasaki&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;? &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;ja&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;? &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;pagination&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Fabfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;automate&lt;/span&gt; &lt;span class="n"&gt;generation&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;simpleHTTP&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;assist&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;FTP&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;SSH&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Dropbox&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Rackspace&lt;/span&gt; &lt;span class="n"&gt;Cloud&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Is&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;personal&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;? &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;するとだいたい以下のような感じでファイルが生成されると思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/work/blog
       ├── content
       ├── develop_server.sh
       ├── fabfile.py
       ├── Makefile
       ├── output
       ├── pelicanconf.py
       └── publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;TinkererからReSTファイルを移行&lt;/h2&gt;
&lt;p&gt;PelicanはReST、Markdownともにサポートしてますし、TinkererはSphinxベースのツールで元々ReSTはサポートしています。
ただ、微妙に方言に違いがあってTinkererで使ってた&lt;code&gt;*.rst&lt;/code&gt;ファイルをそのままPelicanでビルドしようとすると落っこちます。
また、デフォルト設定だとTinkerer管理のような &lt;code&gt;content/YYYY/MM/DD/&amp;lt;slug&amp;gt;.rst&lt;/code&gt; の形式も日付や生成されるファイルのパス情報として読み込んでくれないかったり、画像ファイルを各日付ごとのディレクトリにおいても特に面倒は見てくれません。
そのへん自力でなんとかする必要があります。(軽く調べた感じ、特に移行ツールなどは見つかりませんでした...)&lt;/p&gt;
&lt;h3&gt;ReSTファイルのコンバート, 画像ファイルの移動&lt;/h3&gt;
&lt;p&gt;一部ファイル書き換え程度ならシェル芸でさくっと行けたかもしれないですが、
ファイルの内容を違う行に移動させるのが流石にしんどかったので、今回はやっつけなpythonスクリプトを書きかました。&lt;em&gt;※pyenv-virtualenv 環境に合わせるため2.7系で書いてます。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/laughk/tinker2pelican-rst"&gt;laughk/tinker2pelican-rst&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本的にこちらの&lt;code&gt;README.md&lt;/code&gt; に従っていけば、とりあえずコンテンツの移行はできると思います。&lt;/p&gt;
&lt;h3&gt;Githubpage向けのファイルを移行&lt;/h3&gt;
&lt;p&gt;Githubpage を利用してホスティングする際に必要な静的ファイルも移行します。
&lt;code&gt;output&lt;/code&gt; ディレクトリ配下を git 管理することになるので私の場合はHTMLを生成する際に一緒に生成されるようにしています。&lt;/p&gt;
&lt;p&gt;そのため以下のような感じでファイルを置き、&lt;code&gt;pelicanconf.py&lt;/code&gt; の設定をしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ファイル&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/work/blog/content/extra
                      |---- empty           (空ファイル, Githubpage用 .nojekyllとして利用する。)
                      |---- gitignore       (output用のgitignore)
                      |---- CNAME           (Githubpage用の CNAMEファイル)
                      `---- gooleXXXXXXXX   (GoogleAnalytics用のの静的HTMLファイル。テンプレート扱いされないように拡張子はなし)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pelicanconf.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;     &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;      &lt;span class="p"&gt;},&lt;/span&gt;       &lt;span class="c1"&gt;# for original domain&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.nojekyll&amp;#39;&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;       &lt;span class="c1"&gt;# for Githubpage&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/gitignore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.gitignore&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;       &lt;span class="c1"&gt;# for Githubpage&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/gooleXXXXXXXX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gooleXXXXXXXX&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;                    &lt;span class="c1"&gt;# for google analytics&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;試しにブログを生成してブラウザから見てみる&lt;/h3&gt;
&lt;p&gt;ここまできたら、一度HTMLファイルを生成してローカルでプレビューしてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% pelican content -S pelicanconf.py -o output

&lt;span class="c1"&gt;## pelican-quickstartの際に Makefile を生成していた場合は以下でもOK&lt;/span&gt;
% make html

% &lt;span class="nb"&gt;cd&lt;/span&gt; output &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態で http://localhost:8000 にアクセスすれば、生成されたブログをブラウザから確認できます。&lt;/p&gt;
&lt;h2&gt;設定をいじって自分好みにカスタムしていく&lt;/h2&gt;
&lt;p&gt;データの移行ができたらあとは純粋にPelicanを自分用に作りこんでいきます。
詳細なカスタマイズに関しては今回は割愛しますが、公式のドキュメントが充実していたり、テーマも充実しているので色々試してみるのがいいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式ドキュメント &lt;a href="https://pelican.readthedocs.org/en/3.4.0/"&gt;Pelican 3.4.0 &amp;mdash; Pelican 3.4.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テーマ &lt;a href="https://github.com/getpelican/pelican-themes"&gt;getpelican/pelican-themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他テーマをいじっていた時のメモ&lt;/h2&gt;
&lt;p&gt;この辺はざっくりと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全に気に入るようなものは Pelican の充実したテーマの中でも見つからないんで、結局カスタム。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelican-bootstrap3&lt;/code&gt; が一番カスタムしやすそうだったので、ベースに導入。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.addthis.com/"&gt;Addthis&lt;/a&gt; でソーシャルボタンが一発で行けるかと思いきやURLに勝手に &lt;code&gt;#xx-xxxxxxx&lt;/code&gt; ってつけられてキモいので削除、自力でテンプレ作成。&lt;/li&gt;
&lt;li&gt;広告入れる場合はレスポンシブデザインか小さいサイズにしておかないと思わぬところでデザインが崩れる。&lt;/li&gt;
&lt;li&gt;画像もレスポンシブ対策をCSSにしないとデザインが崩れる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pulishconf.py&lt;/code&gt; に &lt;code&gt;RELATEVE_URLS = False&lt;/code&gt; 入れておかないとホスティングの際にDISCUSのコメント欄が死ぬ (相対パスになっちゃったSITEURLがDISCUS用のJSのパラメータに渡っちゃうため)&lt;/li&gt;
&lt;li&gt;生成に必要な部分と生成物はこれまで違うレポジトリで管理していたけど、&lt;code&gt;ghp-import&lt;/code&gt; なるものがあったので、生成物を&lt;code&gt;gh-pages&lt;/code&gt;ブランチ、設定ファイルや元のMarkdown,ReSTファイルなどは&lt;code&gt;master&lt;/code&gt;ブランチという形でレポジトリを統合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;単純にTinkererからPelicanに移す場合はReSTの方言に気をつければそこまで手間がかかることではないかもしてませんが、テーマを作りこんだりPelicanそのものの使い勝手がよくわからずはまってしまったり、せっかくの機会だからブランチを意識して一人プルリクフローで作っていったり、各ブランチに違うレポジトリ追加して管理方法を変えてみたりとやっていたら想像以上に大掛かりな作業になってしまいました。。(まるまる4日間)&lt;/p&gt;
&lt;p&gt;ただ、Pelicanはテーマも充実していますしMarkdownも使えたり、一部&lt;code&gt;iframe&lt;/code&gt;を埋め込もうとするとビルドが落っこちるとかはないので非常によいですね。
MarkdownとReSTの混合状態でもいい感じでビルドしてくれます。MarkdownのGFM対応がちょっと中途半端な感じがあるのが残念ですが、概ね Tinkerer より個人的にしっくり来ています。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 10 Aug 2014 21:30:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-08-10:2014/08/10/tinker2pelican-repo.html</guid><category>tinkerer</category><category>pelican</category><category>githubpage</category></item><item><title>第一回Ansible勉強会でLTさせてもらった</title><link>http://memo.laughk.org/2014/08/10/ansible-study01-repo.html</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ansible-users.connpass.com/event/5968/"&gt;Ansible 勉強会 #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://togetter.com/li/678544"&gt;Ansible勉強会 #1 まとめ - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すでに開催から2ヶ月近く経とうとしていますが、自分用の記録として今更書いておきます。
なんかゴメンナサイ。&lt;/p&gt;


&lt;p&gt;LTの際に使ったスライドはこちら&lt;/p&gt;
&lt;div style="width: 65%"&gt;
&lt;script async class="speakerdeck-embed" data-id="604718d0d2c40131cd584eace499ef8a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;実は &lt;a href="http://qiita.com/advent-calendar/2013/ansible"&gt;Ansible Advent Calendar 2013&lt;/a&gt; で投稿させてもらった以下のものが元ネタだったりします。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://memo.laughk.org/2013/12/10/ansible_with_infrastructure_engineer.html"&gt;あるインフラエンジニアとAnsibleの付き合い方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容としてはあまり突っ込んだことよりも、MSPな人間でも現実的に使えそうで嬉しいよみたいな感じでお話させてもらったつもりです。
踏み台越えの話のところで反応頂いたりしていたようで、当日gkbr状態で緊張しながらもお話させた頂いて本当に良かったなと思っております。&lt;/p&gt;
&lt;p&gt;内輪の勉強会では色々話をしていますが、ここまで多数の方の前でお話させていただいたのは初めてで非常に良い機会となりました。
また、実際にAnsibleを運用の現場で使われている話も多数聞くことができて実際のところ自分もまだまだ使いこなせていない部分が多いなとも痛感しました。
個人的には&lt;a href="https://github.com/livedoor/yabitz"&gt;Yabitz&lt;/a&gt;の存在を知ることができたことも大きかったです。&lt;/p&gt;
&lt;p&gt;この2ヶ月の間にも関連の記事もかなり増えてきたり、本が出たりとAnsibleかなり盛り上がってきている感がありますね。
今後はちょっと仕事の関係で使う機会が減るかもしれないですが、ある程度使い慣れている部分もあるので自宅マシンの構成管理とかにはこれからも引き続き使っていきたいです。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 10 Aug 2014 11:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-08-10:2014/08/10/ansible-study01-repo.html</guid><category>勉強会</category><category>Ansible</category></item><item><title>Arch Linux はじめました</title><link>http://memo.laughk.org/2014/05/25/start_archlinux.html</link><description>&lt;img alt="" src="/images/2014/05/25/screenshot1.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Ubuntu14.04&lt;/tt&gt; のリリース情報もあり、&lt;/div&gt;
&lt;div class="line"&gt;これまでDELL XPS13で使ってきた &lt;tt class="docutils literal"&gt;Linux Mint16&lt;/tt&gt; 環境をどうしようかなと思っていましたが、&lt;/div&gt;
&lt;div class="line"&gt;いろいろ考えて &lt;tt class="docutils literal"&gt;Linux Mint17&lt;/tt&gt; へのアップグレードは行わず、思い切って1週間ほど前に &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; に引っ越しました。&lt;/div&gt;
&lt;div class="line"&gt;概ね安定して使えてる感じがあります。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;今回はインストールの際の簡単なメモとか、1周間ほど使ってみた感想とか。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; は基本的な作業部分は公式 &lt;tt class="docutils literal"&gt;Wiki&lt;/tt&gt; 見ればほとんど解決できるのであまりそういうことは書かないです。&lt;/div&gt;
&lt;/div&gt;

&lt;div class="section" id="virtualboxos"&gt;
&lt;h2&gt;VirtualboxのゲストOSにして練習&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;実は1年ほど前にも &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; にはトライしていたのですが、&lt;/div&gt;
&lt;div class="line"&gt;ちょうど &lt;tt class="docutils literal"&gt;sytemd&lt;/tt&gt; への以降の時期だったのか公式 &lt;tt class="docutils literal"&gt;wiki&lt;/tt&gt; の内容が実物とだいぶずれてしまっている感があり&lt;/div&gt;
&lt;div class="line"&gt;その時は &lt;tt class="docutils literal"&gt;GUI&lt;/tt&gt; 画面を見ることなく挫折してしまっていました。。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;今回はそういった背景もあり、流石に &lt;tt class="docutils literal"&gt;XPS13&lt;/tt&gt; にいきなりインストールするのは怖かったので&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Virtualbox&lt;/tt&gt; で実際にインストールを行い、 &lt;tt class="docutils literal"&gt;Gnome3&lt;/tt&gt; が動くところまで確認。&lt;/div&gt;
&lt;div class="line"&gt;現在は公式 &lt;tt class="docutils literal"&gt;Wiki&lt;/tt&gt; に従っていけばだいたい間違いないということを確認できたので、&lt;/div&gt;
&lt;div class="line"&gt;実機にインストールする踏ん切りがつきました。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ちなみ、 &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; だと公式リポジトリに &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;virtualbox-guest-addition&lt;/span&gt;&lt;/tt&gt; が用意してあるようで非常にお手軽に試せました。&lt;/div&gt;
&lt;div class="line"&gt;これさえ入れとけばドライバ周りで引っかかることもないようですし。インストールも以下のような感じでOKでした。&lt;/div&gt;
&lt;div class="line"&gt;( 詳細は公式 &lt;tt class="docutils literal"&gt;wiki&lt;/tt&gt; を見るのが一番いいと思います -&amp;gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/VirtualBox_%28%E6%97%A5%E6%9C%AC%E8%AA%9E%29#Arch_Linux_.E3.82.92.E3.82.B2.E3.82.B9.E3.83.88.E3.81.AB.E3.81.99.E3.82.8B"&gt;VirtualBox (日本語) - ArchWiki&lt;/a&gt; )&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo pacman -S virtualbox-guest-utils
$ sudo sh -c &lt;span class="s1"&gt;&amp;#39;cat &amp;gt;&amp;gt; /etc/modules-load.d/virtualbox.conf &amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s1"&gt;vboxguest&lt;/span&gt;
&lt;span class="s1"&gt;vboxsf&lt;/span&gt;
&lt;span class="s1"&gt;vboxvideo&lt;/span&gt;
&lt;span class="s1"&gt;EOF&amp;#39;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/bin/VBoxClient-all&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.xinitrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xps13osgui"&gt;
&lt;h2&gt;XPS13実機へのOSインストールからGUIインストールまで&lt;/h2&gt;
&lt;div class="section" id="os"&gt;
&lt;h3&gt;OSのインストール&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Arch Linux&lt;/tt&gt; は基本的な &lt;tt class="docutils literal"&gt;OS&lt;/tt&gt; インストールはコンソール越しのコマンドラインで行います。&lt;/div&gt;
&lt;div class="line"&gt;DVDまたはCDブートがうまくいってネットワーク接続が確保できれば、&lt;/div&gt;
&lt;div class="line"&gt;基本的には公式 &lt;tt class="docutils literal"&gt;Wiki&lt;/tt&gt; のインストールガイド( &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Installation_Guide_%28%E6%97%A5%E6%9C%AC%E8%AA%9E%29"&gt;Installation Guide (日本語) - ArchWiki&lt;/a&gt; に従えば、基本的な &lt;tt class="docutils literal"&gt;Unix&lt;/tt&gt; 系のコマンドライン知識で十分行える範囲だとは思います。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ネットワークに関してはXPS13は物理NICが付いていないのですが、&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;BUFFALO &lt;span class="pre"&gt;LUA3-U2-ATX&lt;/span&gt;&lt;/tt&gt; でUSB経由でLANをつないだところ問題なく認識されました。&lt;/div&gt;
&lt;div class="line"&gt;( 基本的に &lt;tt class="docutils literal"&gt;Mac&lt;/tt&gt; も対応しているUSB NICであれば認識してくれそうな感じはあります。)&lt;/div&gt;
&lt;/div&gt;
&lt;iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=laughk-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=ss_til&amp;amp;asins=B002IT5ZPG" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"&gt;&lt;/iframe&gt;&lt;!-- .. amazonjp:: http://www.amazon.co.jp/gp/product/B002IT5ZPG --&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;インストール作業時は &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Dhcpcd_%28%E6%97%A5%E6%9C%AC%E8%AA%9E%29"&gt;dhcpcd (日本語) - ArchWiki&lt;/a&gt; の手動起動部分を参考にとりあえず &lt;tt class="docutils literal"&gt;DHCP&lt;/tt&gt; でインターネットへの接続を確保してしまうのが一番楽だと思います。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;interface&lt;/tt&gt; がわからない場合は &lt;tt class="docutils literal"&gt;ls /sys/class/net&lt;/tt&gt; するのがいいでしょう。(by &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Network_configuration"&gt;Network configuration - ArchWiki&lt;/a&gt;) 。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ネットワークにつながったら &lt;tt class="docutils literal"&gt;Install Guide&lt;/tt&gt; を元に基本的なパッケージをどんどん突っ込んでいくことになりますが&lt;/div&gt;
&lt;div class="line"&gt;とりあえず、これやっときゃいい的なものが知りたい場合、以下の記事がシンプルにまとまっていてわかりやすいです。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://blog.volment.com/?p=47"&gt;実は簡単Arch Linuxのインストール手順！ | volment&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gui"&gt;
&lt;h3&gt;GUIインストール&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;GUI&lt;/tt&gt; は &lt;strong&gt;ディスプレイマネージャー&lt;/strong&gt; (ログイン時にパスワードを聞かれる画面)と &lt;strong&gt;デスクトップ環境&lt;/strong&gt; (&lt;tt class="docutils literal"&gt;Gnome&lt;/tt&gt; とか &lt;tt class="docutils literal"&gt;KDE&lt;/tt&gt;)のインストール・設定作業になります。&lt;/div&gt;
&lt;div class="line"&gt;今回私は &lt;tt class="docutils literal"&gt;GDM&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; の組み合わせでインストールをしました。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;基本的に &lt;tt class="docutils literal"&gt;pacman &lt;span class="pre"&gt;-S&lt;/span&gt; &amp;lt;displaynamager_name&amp;gt; &amp;lt;desctop_name&amp;gt;&lt;/tt&gt; でインストールすればOKなのですが、&lt;/div&gt;
&lt;div class="line"&gt;この際に他にも必要になりそうなものは入れておくといいかもしれません。&lt;/div&gt;
&lt;div class="line"&gt;特にトラックパッドを使いたい場合、ちゃんとドライバを入れとかないとマウスポインタが使えないんで要注意です。&lt;/div&gt;
&lt;div class="line"&gt;(参考: &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Touchpad_Synaptics_%28%E6%97%A5%E6%9C%AC%E8%AA%9E%29"&gt;Touchpad Synaptics (日本語) - ArchWiki&lt;/a&gt; )&lt;/div&gt;
&lt;div class="line"&gt;また、 &lt;tt class="docutils literal"&gt;Ubuntu&lt;/tt&gt; 等他のディストリビューションでは &lt;tt class="docutils literal"&gt;GUI&lt;/tt&gt; 環境にほぼデフォルトで &lt;tt class="docutils literal"&gt;Terminal エミュレータ&lt;/tt&gt; が付属されていますが、&lt;/div&gt;
&lt;div class="line"&gt;少なくとも &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; インストールの際はついてこないので、各環境で利用できる &lt;tt class="docutils literal"&gt;Termin エミュレータ&lt;/tt&gt; も入れとかないと &lt;tt class="docutils literal"&gt;GUI&lt;/tt&gt; ログインしてからいろいろ面倒なことになります。&lt;/div&gt;
&lt;div class="line"&gt;使えそうなものは &lt;tt class="docutils literal"&gt;pacman &lt;span class="pre"&gt;-Ss&lt;/span&gt; terminal&lt;/tt&gt; などで探してみるのがいいでしょう。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;あとは一般ユーザーの作成がまだだった場合は、 &lt;tt class="docutils literal"&gt;GUI&lt;/tt&gt; インストール前に追加しておきましょう。&lt;/div&gt;
&lt;div class="line"&gt;必要であれば同時にこの段階で &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; 権限も付与しときましょう。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;GUIインストール後の基本的なところ&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;GUI&lt;/tt&gt; ログインができるようになったら、あとは基本的な環境構築をやってく感じで
この辺から他のディストリビューションとの難易度的な差がなくなってきます。
むしろ公式 &lt;tt class="docutils literal"&gt;Wiki&lt;/tt&gt; が充実しているのでかえって楽にさえ感じてくるかもしれないです。
だいたいやったことを上げてみると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; の設定からいじれるように &lt;tt class="docutils literal"&gt;NetworkManager&lt;/tt&gt; をインストール&amp;amp;有効化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Openvpn&lt;/tt&gt; の追加&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;GUIから設定できるように &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;networkmanager-openvpn&lt;/span&gt;&lt;/tt&gt; を入れる。詳細はこちら &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/NetworkManager_%28%E6%97%A5%E6%9C%AC%E8%AA%9E%29"&gt;NetworkManager (日本語) - ArchWiki&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt; を利用するため &lt;tt class="docutils literal"&gt;yaourt&lt;/tt&gt; をインストール。&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Yaourt_%28%E6%97%A5%E6%9C%AC%E8%AA%9E%29"&gt;Yaourt (日本語) - ArchWiki&lt;/a&gt; を参照&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;半透明に設定したいツールの対応。&lt;/dt&gt;
&lt;dd&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Gnome-Terminal&lt;/span&gt;&lt;/tt&gt; が最新だと &lt;tt class="docutils literal"&gt;Transparent&lt;/tt&gt; オプションがなくなってしまっていたので &lt;tt class="docutils literal"&gt;devilspie&lt;/tt&gt; を導入。 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.devilspie/opacity.ds&lt;/span&gt;&lt;/tt&gt; とかを作って以下のように記載。&lt;/div&gt;
&lt;div class="line"&gt;あとは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.xprofile&lt;/span&gt;&lt;/tt&gt; なり &lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; の自動起動するアプリケーションなりにログイン時に &lt;tt class="docutils literal"&gt;devilspie&lt;/tt&gt; を起動するようにしておけばOK。&lt;/div&gt;
&lt;div class="line"&gt;(ついでに &lt;tt class="docutils literal"&gt;Gvim&lt;/tt&gt; も一緒に対応)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;window_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gnome-terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;opacity&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;window_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gvim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;opacity&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;日本語入力をするため &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mozc-ut&lt;/span&gt;&lt;/tt&gt; をインストール&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;日本語対応フォントをインストール&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;UI&lt;/tt&gt; 周り&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Takaoフォント&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;IPAフォント&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;MSフォント&lt;/tt&gt; とか&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;作業環境&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Ricty&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Dejavu Sans&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;aur/powerline-fonts-git&lt;/span&gt;&lt;/tt&gt;  とか( &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;powerline-font&lt;/span&gt;&lt;/tt&gt; があるのが地味に嬉しい )&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;絵文字関連&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ttf-symbol&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ttf-freefont&lt;/span&gt;&lt;/tt&gt; とか (これでも一部化ける。。)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;キーバインド変更&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;右Altで入力言語の切り替えをしたかったので &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.Xmodmap&lt;/span&gt;&lt;/tt&gt; を編集して &lt;tt class="docutils literal"&gt;Alt_R&lt;/tt&gt; を &lt;tt class="docutils literal"&gt;Zenkaku_Hankaku&lt;/tt&gt; にバインド。
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.xprofile&lt;/span&gt;&lt;/tt&gt; なりに &lt;tt class="docutils literal"&gt;xmodmap &lt;span class="pre"&gt;$HOME/.Xmodmap&lt;/span&gt;&lt;/tt&gt; を追記するのを忘れずに。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;ビットマップフォントのアンチエイリアスを有効化&lt;/dt&gt;
&lt;dd&gt;&lt;div class="first line-block"&gt;
&lt;div class="line"&gt;個人的にビットマップフォントまんまは見づらい。。ここは公式の情報を漁ってみるもいいものに出会えず。&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://archlinux-blogger.blogspot.jp/2013/08/arch-linux.html"&gt;普段使いのArch Linux: Arch Linuxで日本語フォントを設定 | 日本語フォントのインストール&amp;amp;見やすく表示する設定&lt;/a&gt; を参考にさせてもらったところうまく行った。&lt;/div&gt;
&lt;div class="line"&gt;以下の内容の &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/fontconfig/fonts.conf&lt;/span&gt;&lt;/tt&gt; を追加する感じで。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;font&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;embeddedbitmap&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;bool&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/bool&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hintstyle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;const&amp;gt;&lt;/span&gt;hintnone&lt;span class="nt"&gt;&amp;lt;/const&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;VMware Player&lt;/tt&gt; のインストール&lt;/dt&gt;
&lt;dd&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://my.vmware.com/jp/web/vmware/downloads"&gt;公式&lt;/a&gt; から64bitバイナリ を取得して、インストール。&lt;/div&gt;
&lt;div class="line"&gt;注意点があるので、そこは &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/VMware"&gt;VMware - ArchWiki&lt;/a&gt; を参照しながらやればOK&lt;/div&gt;
&lt;div class="line"&gt;ただし、現状ゲストの &lt;tt class="docutils literal"&gt;Windows8.1&lt;/tt&gt; を一回起動すると &lt;tt class="docutils literal"&gt;Super&lt;/tt&gt; キーがホールドされてるようなおかしな状態になってしまう。。 (解決法調査中)&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;VirtualBox&lt;/tt&gt; のインストール&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;pacman&lt;/tt&gt; の &lt;tt class="docutils literal"&gt;community&lt;/tt&gt; レポジトリにあったのでコマンド一発でOK。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;その他普段使いのツールたち&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Gvim&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;メインで使ってるエディタ&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Atom&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Github&lt;/tt&gt; 的なあれ。 &lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt; に &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;atom-editor&lt;/span&gt;&lt;/tt&gt; という名前ですでに登録済みでびっくり。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Dropbox&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; レポジトリにもあるけど、そちらはインストールがコケるので通常レポジトリのものでOK&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;firefox&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Web&lt;/tt&gt; ブラウザ&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Chromium&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Web&lt;/tt&gt; ブラウザ&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Google Chrome&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Web&lt;/tt&gt; ブラウザ、 &lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt; を使うと最新の &lt;tt class="docutils literal"&gt;deb&lt;/tt&gt; からインストールしてくれる&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;KeepassX2&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;マルチプラットフォームなパスワード管理ツール。
&lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt; にある2系対応 &lt;tt class="docutils literal"&gt;KeepassX&lt;/tt&gt; 。 アルファ版らしいが十分実用レベルで問題なし&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Synapse&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Linux&lt;/tt&gt; 版の &lt;tt class="docutils literal"&gt;Alfred&lt;/tt&gt; 的なランチャー。多分こいつが現状開発が活発っぽい&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Zeal&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Linux&lt;/tt&gt; 版の &lt;tt class="docutils literal"&gt;Dash&lt;/tt&gt; 的なドキュメントブラウザー&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Growl for Linux&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;weechat&lt;/tt&gt; の通知を受けたいので必須。 &lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt; にある&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Remina&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;Windows&lt;/tt&gt; サーバにリモデする際に必要&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gnome-screenshot&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;スクリーンショットツール
&lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; 単体だと入ってないので必須&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;evince&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;PDF&lt;/tt&gt; ビュワー&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;gThumb&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;jpg&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;png&lt;/tt&gt; などの画像ファイルビュワー&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;GIMP&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;定番画像加工ツール。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Inkscape&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;定番お絵かきツール。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;LibreOffice&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;定番フリーのオフィスツール。
&lt;tt class="docutils literal"&gt;VM&lt;/tt&gt; の &lt;tt class="docutils literal"&gt;Windows&lt;/tt&gt; を使うまでもないときはやっぱ必要&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Rhythmbox&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;ローカルの音楽ファイル再生用&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;p7zip&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;&lt;tt class="docutils literal"&gt;7zip&lt;/tt&gt; 扱うときに&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんなところでしょうか。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;感想とかいろいろ&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ディストリ変更の理由としては、普段使いには &lt;tt class="docutils literal"&gt;Mint&lt;/tt&gt; 使いやすいなーとは思うのですが、&lt;/div&gt;
&lt;div class="line"&gt;最近だと &lt;tt class="docutils literal"&gt;VMware&lt;/tt&gt; 環境があったり、 &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; の最新を追っかけるの関係であまり &lt;tt class="docutils literal"&gt;apt&lt;/tt&gt; 経由でアプリを入れる機会も減ってきていたこと&lt;/div&gt;
&lt;div class="line"&gt;あと、やはり &lt;tt class="docutils literal"&gt;OS&lt;/tt&gt; のバージョンが上がるたびにクリインストールするのもいい加減しんどいなというあたりがあります。&lt;/div&gt;
&lt;div class="line"&gt;だいぶ前に &lt;a class="reference external" href="http://laugh-labo.blogspot.jp/2013/04/linuxmintultrabook.html"&gt;ラフなラボ: いい感じのLinuxMintなUltrabook環境を手に入れた&lt;/a&gt; を書いた時もこのあと1週間後にはバージョンアップのためにクリインストールしてたりとかします。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;実際インストールしてみると結構面倒な作業を通過しなければいけないですが、&lt;/div&gt;
&lt;div class="line"&gt;今までデスクトップ、サーバ含め &lt;tt class="docutils literal"&gt;Linux&lt;/tt&gt; を使ってきて気に入っているものを自分で寄せ集めて環境つくりやすい面では &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; よいですね。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt; レポジトリを見ているとかなり最新のものも含まれていたりするので、パッケージの管理も非常にやりやすそうな感じです。&lt;/div&gt;
&lt;div class="line"&gt;かといって定番のパッケージなども公式のレポジトリに含まれているので &lt;tt class="docutils literal"&gt;pacman&lt;/tt&gt; 経由でさくっとインストールでき、非常に使いやすい印象もあります。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Ubuntu&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;Mint&lt;/tt&gt; を使っていても結局カリカリに自分の環境を作りこんでいく方は &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; いいんじゃないかなと思います。&lt;/div&gt;
&lt;div class="line"&gt;( そいうった意味では &lt;tt class="docutils literal"&gt;Gentoo Linux&lt;/tt&gt; も魅力的ですね。)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;デスクトップ環境は &lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; なのでぶっちゃけ見た目はそれほど変わってないですが&lt;/div&gt;
&lt;div class="line"&gt;試したいツールや、最新の状態に保っておくにはかなりやりやすそうな感じがあって今の私のニーズ的にはいい感じです。&lt;/div&gt;
&lt;div class="line"&gt;今後はしばらく &lt;tt class="docutils literal"&gt;XPS13&lt;/tt&gt; は &lt;tt class="docutils literal"&gt;ArchLinux&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;Cinnamon&lt;/tt&gt; 行ってみようと思います。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 25 May 2014 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-05-25:2014/05/25/start_archlinux.html</guid><category>ArchLinux</category><category>環境構築</category></item><item><title>シェルスクリプトが '&gt; $logfile 2&gt;&amp;1' だらけにならなくて済んだ話</title><link>http://memo.laughk.org/2014/04/24/shell_exec_log.html</link><description>&lt;dl class="docutils"&gt;
&lt;dt&gt;※ 2014-04-26&lt;/dt&gt;
&lt;dd&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;追記並びに一部コマンド部分の修正を行いました。( &lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt; =&amp;gt; &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&lt;/tt&gt; に変更 )&lt;/div&gt;
&lt;div class="line"&gt;個人用のチラシの裏のつもりが予想以上に反響いただいていたようで非常にびっくりしております。&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ちょっとしたバッチ処理的なものはさくっとシェルスクリプトでやっています。&lt;/div&gt;
&lt;div class="line"&gt;で、ログをとっておくべくリダイレクトを噛ますわけですが、&lt;/div&gt;
&lt;div class="line"&gt;スマートに書く方法を調べたのでメモ。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;元ネタは &lt;a class="reference external" href="https://twitter.com/sechiro"&gt;&amp;#64;sechiro&lt;/a&gt; さんの &lt;a class="reference external" href="http://sechiro.hatenablog.com/entry/2013/08/15/bash%E3%81%AE%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%BD%AE%E6%8F%9B%E6%A9%9F%E8%83%BD%E3%82%92%E6%B4%BB%E7%94%A8%E3%81%97%E3%81%A6%E3%80%81%E3%82%B7%E3%82%A7%E3%83%AB%E4%BD%9C%E6%A5%AD%E3%82%84%E3%82%B9"&gt;bashのプロセス置換機能を活用して、シェル作業やスクリプト書きを効率化する&lt;/a&gt; でございます。&lt;/div&gt;
&lt;div class="line"&gt;本当に参考になりました。ありがとうございます。&lt;/div&gt;
&lt;/div&gt;

&lt;div class="section" id="id1"&gt;
&lt;h2&gt;今までは&lt;/h2&gt;
&lt;p&gt;こんなことやってたわけです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;LOGFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/script-log

command1 &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
command2 &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
...      &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
...      &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
...      &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
...      &amp;gt;&amp;gt; $LOGFILE 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まあ1,2行くらいならいいのですが、これが5行超えてくるともう編集するのも読むのも嫌になってきます。
この辺調べてみると、 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; コマンド &lt;span class="strike"&gt;によるプロセス置換 で&lt;/span&gt; で出力を変更してあげると良いようです。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;2014-04-26&lt;/span&gt;&lt;/tt&gt; 追記&lt;/dt&gt;
&lt;dd&gt;下の例で出しています &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; によるフィルタリングはプロセス置換にあたるようですが、
単純なログのリダイレクト部分については &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt; の組み込みコマンド &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; によるリダイレクト指定の際の挙動のようで
プロセス置換とは別物のようです。勉強不足ですみません。。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="exec"&gt;
&lt;h2&gt;execで解決&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;LOGFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/script-log

&lt;span class="nb"&gt;exec&lt;/span&gt; 1&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;cat &amp;gt;&amp;gt; $LOGFILE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; 2&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;cat &amp;gt;&amp;gt; $LOGFILE&lt;span class="o"&gt;)&lt;/span&gt;

command1
command2
...
...
...
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;こんな感じで書けます。&lt;/div&gt;
&lt;div class="line"&gt;さらに &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; も使って以下のようにすると、ログの各行の先頭に&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[YYYY-mm-dd&lt;/span&gt; HH:MM:SS]&lt;/tt&gt;  のようにタイムスタンプも付けられます。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;LOGFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/script-log

&lt;span class="nb"&gt;exec&lt;/span&gt; 1&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;{print strftime(&amp;quot;[%Y-%m-%d %H:%M:%S] &amp;quot;),$0 } { fflush() } &amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOGFILE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; 2&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;awk &lt;span class="s1"&gt;&amp;#39;{print strftime(&amp;quot;[%Y-%m-%d %H:%M:%S] &amp;quot;),$0 } { fflush() } &amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; $LOGFILE&lt;span class="o"&gt;)&lt;/span&gt;

command1
command2
...
...
...
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;tee&lt;/tt&gt; コマンドを使えば出力を保ちながらロギングとかもできそうです。&lt;/div&gt;
&lt;div class="line"&gt;ただしこの出力の変更は &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt; の機能らしく、シバンを &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#!/bin/sh&lt;/span&gt;&lt;/tt&gt; にすると&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Syntax error: redirection unexpected&lt;/tt&gt; が返って来てうまく処理が動かないので&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#!/bin/bash&lt;/span&gt;&lt;/tt&gt; と書く必要が有ります。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;ちょこちょこ処理が増えてきてしまうと
すぐに &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt; $logfile &lt;span class="pre"&gt;2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;/tt&gt; まみれになってしまっていたシェルスクリプトがようやくスッキリ書けるようになりました。
&lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; によるプロセス置換は他にも応用が効きそうなのでもっと調べると色々捗りそうです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;2014-04-26 追記&lt;/h2&gt;
&lt;p&gt;コメントにて更に素敵な方法を紹介していただけました。
&lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 利用でもさらにシンプルな記載ができ、 また &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;  を使った記載方法もあるようです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;もっとシンプルな &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; などと組み合わせてフィルタリングするのは厳しいですが、単純に出力先を指定するにはこちらがよさそうです。&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;LOGFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/script-log
&lt;span class="nb"&gt;exec&lt;/span&gt; &amp;gt;&amp;gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;$&lt;span class="s2"&gt;LOGFILE&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1

command1
command2
...
...
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; を使った方法&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;この方法はコメントでご指摘いただくまで全く知りませんでした。。 こちらの記載方法のほうが汎用性が高そうで使いやすそうですね。&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;LOGFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/script-log

&lt;span class="o"&gt;{&lt;/span&gt;
    command1
    command2
    ...
    ...
    ...
&lt;span class="o"&gt;}&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;$&lt;span class="s2"&gt;LOGFILE&amp;quot;&lt;/span&gt; 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状況に応じて使い分けていければシェルスクリプトがもっと捗りそうです。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Thu, 24 Apr 2014 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-04-24:2014/04/24/shell_exec_log.html</guid><category>shellscript</category></item><item><title>#qpstudy 2014.04 に参加してきたんで自分用まとめとか</title><link>http://memo.laughk.org/2014/04/21/qpstudy_20140419_report.html</link><description>&lt;div class="line-block"&gt;
&lt;div class="line"&gt;だいぶ出遅れてしまいましたが、先週末 &lt;a class="reference external" href="http://www.zusaar.com/event/4897007"&gt;qpstudy 2014.04&lt;/a&gt; に一般枠で参加させてもらってきたので&lt;/div&gt;
&lt;div class="line"&gt;感想や学びになったことのまとめをメモしておきます。&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;他にもまとめている方が多いですが、セッションごとのスライドは以下の通り。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;第1セッション　構築作業の全体フェーズ&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://www.slideshare.net/sho7650/ss-33703096"&gt;qpstudy 2014.04 インフラエンジニアとは、なんだ&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;第2セッション　今回の想定アーキテクチャとアーキテクチャ設計の勘所&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://www.slideshare.net/sechiro/qpstudy201404"&gt;Qpstudy201404 インフラ設計の勘所&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;第3セッション　ハードウェア設計の勘所&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://www.slideshare.net/TakeshiHasegawa1/qpstudy201404-dist"&gt;qpstudy 2014.04 ハードウェア設計の勘所&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;第4セッション　ネットワーク/OS設計の勘所&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://www.slideshare.net/yktko/20140419qpstudyosnw"&gt;20140419【qpstudy】OSとNW設計の勘所&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;第5セッション　ミドルウェア（Web、Ap、DB）設計の勘所&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.slideshare.net/nekoruri/4-33705917"&gt;qpstudy 2014.04 ミドルウェア設計の勘所&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;第6セッション　今後のインフラエンジニアとは&lt;/dt&gt;
&lt;dd&gt;heartbeats &lt;a class="reference external" href="https://twitter.com/netmarkjp"&gt;馬場さん(&amp;#64;netmarkjp)&lt;/a&gt; によるプレゼン。こちらだけスライドは非公開&lt;/dd&gt;
&lt;dt&gt;また当日の &lt;tt class="docutils literal"&gt;Togetter&lt;/tt&gt; がまとめられておりました。&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://togetter.com/li/657194"&gt;qpstudy 2014.04 〜俺の屍を超えて行け、でも踏まないで〜 #qpstudy&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;全体的な感想をつらつらと&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;各セクションの詳細だったりは他の方のブログや、すでに共有されているスライド、&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Togetter&lt;/tt&gt; を見てもらえれば大丈夫そうなので割愛します。(今更感有りまししね。。)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;本編側&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;私自身、 &lt;tt class="docutils literal"&gt;MSP&lt;/tt&gt; の業務をやり始めてまだ2年半程度でとても経験豊富と言えるわけでもないため、&lt;/div&gt;
&lt;div class="line"&gt;今回の新人向けに企画していただいた各セッションはどれもスライドを何度も見返してしまうような刺さる内容ばかりでした。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;その中でも特に最後の馬場さんのセッション内容は本当に基本的な部分でありながらも、&lt;/div&gt;
&lt;div class="line"&gt;時代が変わろうとも絶対変わらないだろうコアな部分を再認識出来ました。&lt;/div&gt;
&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;「段取り力」&lt;/dt&gt;
&lt;dd&gt;過去にこれでコケて失敗してしまうことが何度もありました。何しても、何かをやる際はそのバックグラウンドを正しく見積もって段取りをしっかりやらなければいけないですね。&lt;/dd&gt;
&lt;dt&gt;なんか合った時にシャっとうごいて成果を出す。&lt;/dt&gt;
&lt;dd&gt;ローカルにフォーカスして、「隙間」を見つけてみようという視点は得意不得意があるかもしれませんが
確かに生き残っていく手段としては非常に大事な視点だと思いました。
同じ部署内でも、みんながなかなか手をつけられない、付けたがらないことにグイグイ首を突っ込んでいけると
自ずと振られる仕事もそちらの方面に持っていける傾向は確かにあるなと。
ただ、部署のカルチャーなども考慮すると、単純に「何の評価もされずに使い潰されて終わり」という状況にもなりかねないのでさじ加減は難しいところもあるかなとは感じました。&lt;/dd&gt;
&lt;dt&gt;宿題が良かった&lt;/dt&gt;
&lt;dd&gt;「さくらVPS+お名前ドットコムあたりの環境で、 &lt;tt class="docutils literal"&gt;PHP&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;Ruby&lt;/tt&gt; でなにかサービスを作って動かして &lt;tt class="docutils literal"&gt;qpstudy&lt;/tt&gt; で仲良くなった人たちに公開して運用してみよう」というものでした。
実は私が新卒で1年目だったあたりにも(状況は違ったでしょうが、、) 個人で利用できレンタルサーバーやDNSサービス自体はあったのだとは思いますが、当時私はその情報までたどり着けませんでした。
周りにそのノウハウや &lt;tt class="docutils literal"&gt;Tips&lt;/tt&gt; を語ってくれる先輩等はいなかったというのが一番の原因では有りますが、具体的なサービス名を出してもらえると
業界に入りたての方でも最悪「とりあえずこのキーワードをググって...」から色々な可能性にトライしていけるのではないでしょうか。
なんだかんだで、多少業務で使ってるディストリビューションとズレがあったとしても、自分で管理できるサーバを実際に「運用」してみると、手っ取り早く色々なものを得ることができると思います。(私もそうでした)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;ビアバッシュ、懇親会&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;雰囲気としては、&lt;tt class="docutils literal"&gt;qpstudy&lt;/tt&gt; 自体は今回が2回めの参加となりましたが、&lt;/div&gt;
&lt;div class="line"&gt;なんとなく前回参加させていただいた際にちらっと耳にした「今回はなんかみんなおとなしい」の意味がわかった気がしました。w&lt;/div&gt;
&lt;div class="line"&gt;ビアバッシュが本当にカオスな感じで、みんなでビール飲みながらLTをやりながらワイワイ色々言い合ったりで、&lt;/div&gt;
&lt;div class="line"&gt;はじめの方は戸惑ったものの、十二分に楽しむことが出来ました。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;今回は非公式の2次会まで参加させてもらいましたが、&lt;/div&gt;
&lt;div class="line"&gt;今自分が業務で扱っている仕事やら興味がある技術的な話を利害関係など関係なく&lt;/div&gt;
&lt;div class="line"&gt;話ができる人と出会えるのは本当にいいですね。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Mon, 21 Apr 2014 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-04-21:2014/04/21/qpstudy_20140419_report.html</guid><category>勉強会</category><category>qpstudy</category><category>インフラエンジニア</category></item><item><title>NODE-SetagayaでTerminalのTips的なものを話してきた</title><link>http://memo.laughk.org/2014/04/13/node_setagaya9_repo.html</link><description>&lt;p&gt;しばらくの間参加できていなかった &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;NODE-Setagaya&lt;/span&gt;&lt;/tt&gt; に参加&amp;amp; &lt;tt class="docutils literal"&gt;Terminal&lt;/tt&gt; の &lt;tt class="docutils literal"&gt;Tips&lt;/tt&gt; 的なものを話してきました。
当日利用したスライドはこちら。&lt;/p&gt;
&lt;div style="width: 65%"&gt;
&lt;script async class="speakerdeck-embed" data-id="d7cfa250a4ef0131c78c4612bbd7ec99" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/laughk/cli-mini-hack-number-1-terminaltofalseqin-mu-woshen-meyou"&gt;Cli mini Hack!#1 ~Terminalとの親睦を深めよう~&lt;/a&gt;&lt;/p&gt;
&lt;s&gt;Embed しようとすると Tinkerer のビルドが何故かコケるのでリンクのみ共有です。。&lt;/s&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;Pelican&lt;/tt&gt; に以降したらコケなくなったので埋め込みました！&lt;/p&gt;

&lt;div class="section" id="teminal"&gt;
&lt;h2&gt;Teminalの使い方の話をしようと思ったわけ&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;これまで &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;NODE-Setagaya&lt;/span&gt;&lt;/tt&gt; で話をする機会があった際は&lt;/div&gt;
&lt;div class="line"&gt;「やってみたいんだけど、時間やきっかけなくてなかなか手が付けられてなかったものを扱うかなー」&lt;/div&gt;
&lt;div class="line"&gt;という感じでテーマを選んでいたことが多かったのですが、今回はちょっと視点を変えてみました。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;そこそこの期間この業種で仕事してきたけど、案外自分の身の回りに &lt;tt class="docutils literal"&gt;Twitter&lt;/tt&gt; 界隈とかにいそうな&lt;/div&gt;
&lt;div class="line"&gt;「ザ・ &lt;tt class="docutils literal"&gt;Terminal&lt;/tt&gt; 大好き！」って人がなかなか自分の周りにいないなーと思っていたところと、&lt;/div&gt;
&lt;div class="line"&gt;割と自分自身では仕事を通じて &lt;tt class="docutils literal"&gt;Terminal&lt;/tt&gt; で作業していると落ち着いくなーという人間になったので&lt;/div&gt;
&lt;div class="line"&gt;現状の「俺こうやってるけどみんなどう？」って感じのものを出してみればどんな反応があるのかな？&lt;/div&gt;
&lt;div class="line"&gt;という興味から今回のテーマを選んでみました。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;感想とか&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;「これは知っている！」&lt;/div&gt;
&lt;div class="line"&gt;だったり&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; のあたりでは「おー！これすげー！！」&lt;/div&gt;
&lt;div class="line"&gt;と反応してもらえたり&lt;/div&gt;
&lt;div class="line"&gt;「普段は面倒で調べるのが後回しになってた」&lt;/div&gt;
&lt;div class="line"&gt;などなど、参加メンツからは反応があり、&lt;/div&gt;
&lt;div class="line"&gt;テーマとしてはよいものが選べたかな。という手応えが有りました。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ちょっと直前にゴタゴタした状況で作ってしまい、&lt;/div&gt;
&lt;div class="line"&gt;かなり多めに時間を余してしまった点や、スライド自体がちゃんと閉められてなかったのは&lt;/div&gt;
&lt;div class="line"&gt;今回の反省点だったとは思います。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;最初はやりたい内容を一度に全部流してしまうと、&lt;/div&gt;
&lt;div class="line"&gt;自分自身も結構しんどいし、そもそも参加しているみんながついてこれるか不安だったので&lt;/div&gt;
&lt;div class="line"&gt;今回の内容も人まずは基本的なところをピックアップした半分程度にとどめましたが、&lt;/div&gt;
&lt;div class="line"&gt;機会があったら、&lt;tt class="docutils literal"&gt;DEMO6&lt;/tt&gt; の内容や今回扱いきれなかった部分を中心に&lt;/div&gt;
&lt;div class="line"&gt;また &lt;tt class="docutils literal"&gt;CLI mini Hack&lt;/tt&gt; はやってみたいかなと思いました。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-04-13:2014/04/13/node_setagaya9_repo.html</guid><category>勉強会</category><category>NODE-Setagaya</category><category>Terminal</category><category>シェル芸</category><category>vim</category></item><item><title>久々に第10回記念シェル芸勉強会行ってきたんでまとめとか</title><link>http://memo.laughk.org/2014/04/10/shell_lian_tower.html</link><description>&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ブログ更新自体がかなりお久しぶりです。&lt;/div&gt;
&lt;div class="line"&gt;何とか生きてました。身の回りの環境が最近がらりと変わったわけですが、&lt;/div&gt;
&lt;div class="line"&gt;そのへんはまた近々別のエントリにでもしたいと思います。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;今回は久々にシェル芸勉強会に行ってきたのでそのまとめを。&lt;/div&gt;
&lt;div class="line"&gt;といいつつも、実際の会場の様子は以下の &lt;tt class="docutils literal"&gt;Togetter&lt;/tt&gt; を見てもらったほうが早いかと。&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://togetter.com/li/651837"&gt;第10回記念シェル芸勉強会&amp;#64;シェルリアンタワー&amp;amp;第28回場所が未定だったが決まったぞ定例会 - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="line-block"&gt;
&lt;div class="line"&gt;過去のシェル芸勉強会ブログではいちいち自分の &lt;tt class="docutils literal"&gt;Tweet&lt;/tt&gt; 拾って引用したりと面倒な真似してましたが、&lt;/div&gt;
&lt;div class="line"&gt;今回からは実際に自分で実行したコマンドたちは &lt;tt class="docutils literal"&gt;gist&lt;/tt&gt; にまとめてみました。&lt;/div&gt;
&lt;/div&gt;
&lt;script src="https://gist.github.com/laughk/10381390.js"&gt;&lt;/script&gt;&lt;p&gt;最終問題についてはお察しください。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;収穫とか&lt;/h2&gt;
&lt;p&gt;せっかくなので今回の収穫とか&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;sed &lt;span class="pre"&gt;'s/./&amp;amp;\n/g'&lt;/span&gt;&lt;/tt&gt; より &lt;tt class="docutils literal"&gt;grep &lt;span class="pre"&gt;-o&lt;/span&gt; .&lt;/tt&gt; が便利。&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;会場でたちまち &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; ブームが発生しておりましたが、純粋にマッチ部分だけ抜き出す &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/tt&gt; で縦表示にするテクニックがあるのに今まで気づかず目からウロコものでした。&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; aabbcdabbcccdd &lt;span class="p"&gt;|&lt;/span&gt; grep -o .
a
a
b
b
c
d
a
b
b
c
c
c
d
d
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;grep &lt;span class="pre"&gt;-q&lt;/span&gt;&lt;/tt&gt; で結果を表示しない。&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;これは個人的に地味にいいなと思ったしらなかったオプションで、今までシェルスクリプトを書くときなんかに「ファイル内に文字列があるかないか判定したいだけ」のときなんかリターンコードを見るためだけにわざわざ &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;/dev/null&lt;/tt&gt; に捨てるような無駄なことをしていたのですが、これからはスッキリ書けそうです。&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;$ grep huga file2
huga
$ grep -q huga file2
&lt;span class="c1"&gt;##  なにも表示されない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;xargs&lt;/tt&gt; で余計なレイアウトを取っ払える。&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;もはやシェル芸の定番と思っていた &lt;tt class="docutils literal"&gt;xargs&lt;/tt&gt; もこの使い方は知らなかったです。具体的には以下のような感じ。&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;$ cat toi2.txt
             1
&lt;span class="m"&gt;2&lt;/span&gt; 3
                 &lt;span class="m"&gt;4&lt;/span&gt;                     5
                                 &lt;span class="m"&gt;6&lt;/span&gt;     7
 &lt;span class="m"&gt;8&lt;/span&gt;         9
$ cat toi2.txt &lt;span class="p"&gt;|&lt;/span&gt; xargs
&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; 9
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;大きかったのはこのあたりです。他にも &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; で &lt;tt class="docutils literal"&gt;$0&lt;/tt&gt; をうまく置き換えることによって &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; を省略できたりとかありそうでしたが、&lt;/div&gt;
&lt;div class="line"&gt;この辺は色々試しながらものにしていきたいものです。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;感想とか&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;勉強会自体、最近全然顔を出せていませんでしたが、&lt;/div&gt;
&lt;div class="line"&gt;シェル芸勉強会は私みたいな泥臭いインフラ運用なんかをやってる人間にとってはすぐに仕事に活かせそうな &lt;tt class="docutils literal"&gt;Tips&lt;/tt&gt; がごろごろ転がってて&lt;/div&gt;
&lt;div class="line"&gt;楽しみながら習得できる感じが相変わらず良いですね。&lt;/div&gt;
&lt;div class="line"&gt;今回は懇親会まで行けませんでしたが、また次回参加したいですね。&lt;/div&gt;
&lt;div class="line"&gt;(といっても確か次回は大阪だったはず..orz)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Thu, 10 Apr 2014 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2014-04-10:2014/04/10/shell_lian_tower.html</guid><category>シェル芸</category><category>awk</category><category>grep</category><category>xargs</category><category>勉強会</category></item><item><title>あるインフラエンジニアとAnsibleの付き合い方</title><link>http://memo.laughk.org/2013/12/10/ansible_with_infrastructure_engineer.html</link><description>&lt;p&gt;この記事は &lt;a class="reference external" href="http://qiita.com/advent-calendar/2013/ansible"&gt;Ansible Advent Calender 2013&lt;/a&gt; 10日目の記事です。&lt;/p&gt;
&lt;p&gt;私は普段MSPな一応インフラエンジニア的なことをやっている人間ですが、
少しずつ今の仕事で &lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; を利用し始めているのでその導入の際に障壁になったことや利用しているシーンを紹介したいと思います。&lt;/p&gt;

&lt;div class="section" id="root"&gt;
&lt;h2&gt;障壁1 / root権限&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;CentOSなどのRedHad系を中心に運用している場合は意外と &lt;tt class="docutils literal"&gt;su -&lt;/tt&gt; が使えても &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; が使えない。という状況があるかもしれません。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;fabric&lt;/tt&gt; の場合は無理やりprefixを弄って &lt;tt class="docutils literal"&gt;su &lt;span class="pre"&gt;-c&lt;/span&gt; 'command'&lt;/tt&gt; をやることができなくもないですが &lt;a class="footnote-reference" href="#fabric-su-prifix" id="id1"&gt;[1]&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; の場合は公式で特に対応されるような気配はなく、モジュールを作るしかなさそうですがなんだか割に合わないような気もします。&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ansible/ansible/pull/744"&gt;added su capability by willthames · Pull Request #744 · ansible/ansible · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;私の場合もこの辺は完全に解消できているわけではないですが、極力自社で手が出せる範囲であったり&lt;/div&gt;
&lt;div class="line"&gt;新規構築の際に予め自動化の一環として説明して、少しずつ &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; を使える環境を増やしている状況です。&lt;/div&gt;
&lt;div class="line"&gt;ここは &lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; に限らず他の &lt;tt class="docutils literal"&gt;Provisioning&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;Orchestration&lt;/tt&gt; 系のツールを導入する際にも必要な最低ラインなんで、頑張って確保していくしかないと思います。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;障壁2 / 踏み台を超える&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ここも &lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; に限った話ではないですが、&lt;/div&gt;
&lt;div class="line"&gt;お客さんの環境の運用を行っている場合、&lt;/div&gt;
&lt;div class="line"&gt;踏み台を経由しないとSSHアクセスができず、更に踏み台に勝手にツールを導入することができない。&lt;/div&gt;
&lt;div class="line"&gt;というケースが多いかと思います。イメージとしては以下のような感じ。&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="" src="/images/2013/12/10/graph.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;残念ながら &lt;tt class="docutils literal"&gt;fabric&lt;/tt&gt; のように踏み台サーバ指定のオプションは無いようです。&lt;/div&gt;
&lt;div class="line"&gt;以下のPullリクエストがありながら取り込まれていないところを見ると今後もコマンドや &lt;tt class="docutils literal"&gt;hostファイル&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;playbook&lt;/tt&gt; で管理できる状況になる可能性は低いかもしれません。&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ansible/ansible/pull/2970"&gt;added support for ssh tunneling using ssh&amp;amp;#39;s ProxyCommand option by rodlogic · Pull Request #2970 · ansible/ansible · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかしながらヒント(というより答え)は↑のページにあります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;There already is ANSIBLE_SSH_ARGS where you can specify all of SSH flags&lt;/div&gt;
&lt;div class="line"&gt;and override any Ansible may set by default, FWIW.&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ということで環境変数 &lt;tt class="docutils literal"&gt;ANSIBLE_SSH_ARGS&lt;/tt&gt; に &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; コマンドのオプションを渡すことができるようで、&lt;/div&gt;
&lt;div class="line"&gt;実際これに &lt;tt class="docutils literal"&gt;ANSIBLE_SSH_ARGS=' &lt;span class="pre"&gt;-F&lt;/span&gt; sshconfig.project'&lt;/tt&gt; みたいな感じで渡してあげれば sshconfig ファイルを使って&lt;/div&gt;
&lt;div class="line"&gt;各お客さんごとであったり、プロジェクトごとの踏み台環境を整えることができます。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;これだけあれば、自社内の開発サーバだったり、&lt;/div&gt;
&lt;div class="line"&gt;最悪自分のPCのVM上などに環境を作ってしまえばなんとか使えるところまで持っていけます。&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;具体的には以下のように &lt;tt class="docutils literal"&gt;sshconfig&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;host&lt;/tt&gt; ファイルを作っていけばOKです。&lt;/p&gt;
&lt;div class="section" id="sshconfig-project"&gt;
&lt;h3&gt;sshconfig.project&lt;/h3&gt;
&lt;p&gt;踏み台、内側ネットワークでそれぞれ作成
(&lt;tt class="docutils literal"&gt;Proxycommand&lt;/tt&gt; で &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-F&lt;/span&gt;&lt;/tt&gt; で自分自身を指定するのを忘れずに)、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;## 踏み台サーバ&lt;/span&gt;
Host gateway
    User login_user
    IdentityFile /path/to/identity
    HostName xxx.xxx.xxx.xxx

&lt;span class="c1"&gt;## 接続先のLAN、ログイン情報&lt;/span&gt;
Host 192.168.0.*
    User login_user
    Identityfile /path/to/identity
    Proxycommand ssh -F sshcondig.project gateway nc -w &lt;span class="m"&gt;120&lt;/span&gt; %h %p
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="host-project"&gt;
&lt;h3&gt;host.project&lt;/h3&gt;
&lt;p&gt;必要に応じて作成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;web&lt;span class="o"&gt;]&lt;/span&gt;
web01    &lt;span class="nv"&gt;ansible_ssh_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;192.168.0.11
web02    &lt;span class="nv"&gt;ansible_ssh_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;192.168.0.12
&lt;span class="o"&gt;[&lt;/span&gt;db&lt;span class="o"&gt;]&lt;/span&gt;
db01     &lt;span class="nv"&gt;ansible_ssh_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;192.168.0.21
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="playbook-project-yml"&gt;
&lt;h3&gt;playbook-project.yml&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;あとは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;playbook-project.yml&lt;/span&gt;&lt;/tt&gt; などの名前で playbook を作成したら以下のような感じで実行するだけ&lt;/div&gt;
&lt;div class="line"&gt;状況によって内容は変わるんで今回は割愛します。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;実行&lt;/h3&gt;
&lt;p&gt;ここまでできたら環境変数に気をつけて実行するだけです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANSIBLE_SSH_ARGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; -F sshconfig.project&amp;#39;&lt;/span&gt;
% ansible-playbook playbook-project.yml -i host.project
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;利用シーンなど&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;Provisioning&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;Orchestration&lt;/tt&gt; に関するツールでは冪等性の話もかなり目にしますが、&lt;/div&gt;
&lt;div class="line"&gt;私の場合は複数の会社の人間が管理しているケースが多いため、&lt;/div&gt;
&lt;div class="line"&gt;構成の管理というよりは、多数のホストに同様の作業を行う場合に恩恵を受けるケースが多いです。&lt;/div&gt;
&lt;div class="line"&gt;そのため利用シーンは現状では以下のものに大体とどまっています。&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;全く同じ構成のサーバを複数構築する場合&lt;/li&gt;
&lt;li&gt;お客さん側で環境全体に同じユーザーが必要になった場合 (ldapとか使えよって話かもですが、、)&lt;/li&gt;
&lt;li&gt;複数台にドライバや診断ツールなどのベンダー配布のツールをインストールする場合&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;最近ではコールドスタンバイ的な用途をしているサーバに対して&lt;/div&gt;
&lt;div class="line"&gt;playbook で構成を管理しておくと結構うれしいことが多いんじゃないかなんて考えていますが&lt;/div&gt;
&lt;div class="line"&gt;まだ実現に至っていません。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;今回は具体的な &lt;tt class="docutils literal"&gt;playbook&lt;/tt&gt; を載せたりとかはなかったですが、&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; はやはりymlで手軽に &lt;tt class="docutils literal"&gt;task&lt;/tt&gt; を定義していけるんで非常に使いやすいのが気に入っています。&lt;/div&gt;
&lt;div class="line"&gt;またお客さんの環境を複数持っている場合、この手のツールは様々な事情で思うように導入できないケースも多いですが、&lt;/div&gt;
&lt;div class="line"&gt;クライアント側は &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; (CentOS5以下だと &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-simplejson&lt;/span&gt;&lt;/tt&gt; も必要) だけで使えるのというのも &lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; の強みだと思います。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;インフラ側からも十分利用価値のあるものですので、台数が多い環境の運用をされてる方なども利用を検討してみるとうれしいことがあるかもしれません。&lt;/div&gt;
&lt;/div&gt;
&lt;p class="rubric"&gt;脚注&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="fabric-su-prifix" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/12641514/switch-to-different-user-using-fabric"&gt;python - switch to different user using fabric  - Stack Overflow&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Tue, 10 Dec 2013 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2013-12-10:2013/12/10/ansible_with_infrastructure_engineer.html</guid><category>ansible</category><category>AdventCalendar</category></item><item><title>快適Terminal環境計画 - IRC -</title><link>http://memo.laughk.org/2013/11/21/irc_setup_in_terminal.html</link><description>&lt;div class="line-block"&gt;
&lt;div class="line"&gt;前から tmux と組み合わせて irc bouncer 的な使い方をしていた weechat ですが。&lt;/div&gt;
&lt;div class="line"&gt;いい加減本格的に移行したのでメモ。&lt;/div&gt;
&lt;div class="line"&gt;ちなみに私は今のところ Ubuntu13.10 な 24時間起動のサーバ立てて使っとります。&lt;/div&gt;
&lt;/div&gt;

&lt;div class="section" id="id1"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;ググって出てくる情報見るとapt版だとISO-2022-JPガーみたいな話あるようですが、最近は特に問題ないようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo aptitude install weechat
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;プラグインとか&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;デフォで起動してもいいかもしれないですが、ここは先人の知恵に従って便利なプラグインを導入します。&lt;/div&gt;
&lt;div class="line"&gt;今のところは最低限以下のものだけ入れるだけでもだいぶ違います。&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;weeget&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;weechatのプラグインを管理できるプラグイン&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;growl&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;ハイライトしたキーワードをネットワーク経由でGrowl通知してくれる。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;highmon&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;ハイライトしたキーワードのレスだけを流してくれるバッファができる。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;buffers&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;横に接続中のサーバ、入室中のチャンネルなどバッファの一覧を出してくれる。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;go&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;指定したチャンネルにダイレクトにジャンプできる。関係ないチャンネルを既読にしないで飛べるので地味に便利。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;まずはweegetを導入して、他のプラグインを入れてあげればいい感じです。&lt;/div&gt;
&lt;div class="line"&gt;手順はこちらに従え問題無いかと -&amp;gt; &lt;a class="reference external" href="http://blog.glidenote.com/blog/2012/02/11/weechat-plugins/"&gt;Weegetを利用して、WeeChatのPlugin管理を楽にする&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;起動/設定&lt;/h2&gt;
&lt;div class="section" id="weechat-logger-conf"&gt;
&lt;h3&gt;~/.weechat/logger.conf&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;ロギングはしときたいんでloggerの設定を以下のように変更します。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%plugin.&lt;/span&gt;$&lt;span class="s2"&gt;name/%Y%m%d.weechatlog&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tmux-conf"&gt;
&lt;h3&gt;~/.tmux.conf&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;tmux 内であげっぱなしにするので以下の設定も追加しときます。これをやっとかないと表示がおかしくなります。&lt;/div&gt;
&lt;div class="line"&gt;基本的にIRC内で流れていることは常にキャッチしておきたいのです。(まあbouncer使えよって話かもしれないですが)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -g default-terminal &lt;span class="s2"&gt;&amp;quot;screen-256color&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;起動&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;このあたりでtmux -&amp;gt; weechatを起動&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tmux
weechat-curses
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;設定&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;接続先の設定&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## 普通のIRCサーバの場合
/server add example1 irc.example1.com/6667

## SSL かつ 起動時に自動で接続するように
/server add example2 irc.example2.com/6667 -ssl -autoconnect
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;オレオレ証明書(自己署名証明書)なSSLな場合は以下も実行します。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/set irc.server.example.ssl_verify = off
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;自分の名前とか拾いたいワードをhighlightに追加しときます&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/set weechat.look.highlight *iwasaki*,*laughk*
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;growl プラグイン接続先も追加&lt;/div&gt;
&lt;div class="line"&gt;当然クライントPCにGrowlが入っていることが条件。ネットワーク経由での通知もできるようにしとく。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## 通常使うクライアントPCのIP情報
/set plugins.ver.python.growl.hostname 192.168.xxx.yyy

## クライアント側のGrowlパスワード
/set plugins.var.python.growl.password ****************
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;go プラグインのキーバインドもやっとく。&lt;/div&gt;
&lt;div class="line"&gt;ひとまずバッティングしなさそうだった Alt+g で&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/key bind meta-g /go
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;iso-2022-jp なチャンネルは文字コードの設定も忘れずに。&lt;/div&gt;
&lt;div class="line"&gt;特にweechatは結構いい感じに文字コード直してくれたりするんで自分では化けてることに気づかないケースもあります。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## 対象のチャンネルで
/charset iso2022jp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;他の細かいところなども &lt;a class="reference external" href="http://www.weechat.org/doc/"&gt;公式のドキュメント&lt;/a&gt; 見ながら設定をして&lt;/div&gt;
&lt;div class="line"&gt;大体いいかなというところで変更を保存します。&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/save
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;こんな感じ。まあほぼ見せられないのでモザイクだらけですが&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="" src="/images/2013/11/21/shot2013-11-23_1.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Yea!!&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Thu, 21 Nov 2013 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2013-11-21:2013/11/21/irc_setup_in_terminal.html</guid><category>terminal</category><category>weechat</category><category>irc</category></item><item><title>ブログ移転</title><link>http://memo.laughk.org/2013/11/18/hello_new_blog.html</link><description>&lt;p&gt;これまでたまに &lt;a class="reference external" href="http://laugh-labo.blogspot.com"&gt;ラフなラボ&lt;/a&gt; の方でブログを書いてましたが
もう少し効率良くアウトプットしたいこともあって、
tinkerer + githubpage のこちらの環境に移行しました。
やっぱりReSTで書き留めたものをそのままBlogとして公開できるのは楽でいいですね。
(Octopress使わなかったのはMarkdownよりもReST使いたいから)&lt;/p&gt;
&lt;p&gt;旧ブログを始めた頃に比べると大分目指すべき方向性も違ってきてしまっていたし、
まあ調度良いかなと。&lt;/p&gt;
&lt;p&gt;このブログを立てる際の作業ログも後ほどまとめる予定。
ほとんど自分で面倒見なければいけないのはなかなか手間がかかった、、&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kei Iwasaki</dc:creator><pubDate>Mon, 18 Nov 2013 00:00:00 +0900</pubDate><guid>tag:memo.laughk.org,2013-11-18:2013/11/18/hello_new_blog.html</guid><category>none</category></item></channel></rss>